.\" -*- mode: nroff; coding: utf-8 -*-
.\" Copyright © 2020 Göran Weinholt
.\" SPDX-License-Identifier: MIT
.TH bitwise-not 3scheme 2020-10-07 "" "Scheme Programmer's Manual"
.SH NAME
bitwise-not \- bitwise negation, one's complement
.
.SH LIBRARY
.nf
.BR "(import (rnrs))" "                     ;R6RS"
.BR "(import (rnrs arithmetic bitwise))" "  ;R6RS"
.
.SH SYNOPSIS
.nf
.BI "(bitwise-not " ei )
.
.SH DESCRIPTION
Returns the bitwise negation of the exact integer
.IR ei .
.PP
If Scheme integers were unsigned (i.e. only positive) then this could
be thought of as negating every bit in the integer. There is however a
subtle difference, having to do with the sign of the returned integer,
that makes such a description not quite accurate.
.
.SH "IMPLEMENTATION NOTES"
.TP
GNU Guile
.
In GNU Guile this procedure is faster than the equivalent fixnum-only
procedure
.BR fxnot (3).
.
.SH "RETURN VALUES"
Returns the exact integer object whose two's complement representation
is the one's complement of the two's complement representation of
.BR ei .
.
.SH EXAMPLES
.
.EX
;; There are no bits set in zero, so the returned value
;; has all bits set. Negative numbers notionally have all
;; bits set to the left of the most significant zero bit.
(number->string (bitwise-not #b0) 2)
  => "-1"

;; Visually, it may not be obvious that the returned value
;; is the one's-complement:
(number->string (bitwise-not #b11110000) 2)
  => "-11110001"

;; Masking the value to the desired bit-width will reveal
;; that the value is correct:
(number->string
 (bitwise-and #xFFFF         ; treat as 16-bit unsigned
  (bitwise-not #b11110000)) 2)
     => "1111111100001111"

;; The complement of the complement is the original number:
(bitwise-not -43) => 42
(bitwise-not 42) => -43
.EE
.
\" .SH "APPLICATION USAGE"
\" .
.SH RATIONALE
.B bitwise-not
is one of the fundamental bitwise operators.
\" .
\" .SH COMPATIBILITY
.
.SH ERRORS
This procedure can raise exceptions with the following condition types:
.TP
.BR &assertion " (R6RS)"
The wrong number of arguments was passed or an argument was outside its domain.
.
.SH "SEE ALSO"
.BR fxnot (3)
.
.SH STANDARDS
R6RS,
SRFI-60,
SRFI-151
.
.SH HISTORY
The history of bitwise complement can likely be traced to the first
binary computers that provided a \fBNOT\fP instruction, or to the
invention of binary arithmetic. In Scheme it appeared relatively late
with the (withdrawn) SRFI-33 in 2003, and would not appear in an RnRS
document until R6RS in 2007.
.
.SH AUTHORS
This page is part of the
.I scheme-manpages
project.
It includes materials from the RnRS documents.
More information can be found at
.UR https://github.com/schemedoc/manpages/
.UE .
.
.SH BUGS
.
