.\" -*- mode: nroff; coding: utf-8 -*-
.\" Copyright (c) 2021 G. Weinholt
.\" SPDX-License-Identifier: MIT
.TH bytevector-u8-set! 3scm 2021-02-28 "" "Scheme Programmer's Manual"
.SH NAME
bytevector-u8-set!, bytevector-s8-set! \- modify a byte in a bytevector
.
.SH LIBRARY
.nf
.BR "(import (rnrs))" "                     ;R6RS"
.BR "(import (rnrs bytevectors))" "         ;R6RS"
.BR "(import (scheme base))" "              ;R7RS"
.
.SH SYNOPSIS
.nf
.BI "(bytevector-u8-set! " bytevector " " k " " octet )
.BI "(bytevector-s8-set! " bytevector " " k " " byte ) "  ;R6RS"
.
.SH DESCRIPTION
The
.B bytevector-u8-set!
procedure stores
.I octet
at index
.I k
of
.IR bytevector .
The
.B bytevector-s8-set!
procedure stores the two's complement representation of
.IR byte .
.
\" .SH "IMPLEMENTATION NOTES"
\" .
.SH "RETURN VALUES"
.
Returns unspecified values.
.SH EXAMPLES
.
.EX
(let ((b (make-bytevector 16 -127)))
  (bytevector-s8-set! b 0 -126)
  (bytevector-u8-set! b 1 246)

  (list
    (bytevector-s8-ref b 0)
    (bytevector-u8-ref b 0)
    (bytevector-s8-ref b 1)
    (bytevector-u8-ref b 1)))
          => (-126 130 -10 246)
.EE
.
\" .SH "APPLICATION USAGE"
\" .
\" .SH RATIONALE
\" .
.SH COMPATIBILITY
.
The
.B bytevector-s8-set!
procedure is absent from R7RS. A possible implementation is shown below.
.EX
(define (bytevector-s8-set! bytevector k byte)
  (let ((octet (if (< byte 0) (+ 256 byte) byte)))
    (bytevector-u8-set! bytevector k octet)))
.EE
.SH ERRORS
This procedure can raise exceptions with the following condition types:
.TP
.BR &assertion " (R6RS)"
The wrong number of arguments was passed or an argument was outside its domain.
The index
.I k
was not a valid index for
.IR bytevector .
.
.SH "SEE ALSO"
.
.BR bytevector-u16-set! (3scm)
.SH STANDARDS
R6RS
.
\" .SH HISTORY
\" .
.SH AUTHORS
This page is part of the
.I scheme-manpages
project.
It includes materials from the RnRS documents.
More information can be found at
.UR https://github.com/schemedoc/manpages/
.UE .
\" .
\" .SH BUGS
\" .
