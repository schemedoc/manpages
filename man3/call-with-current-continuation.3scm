.\" -*- mode: nroff; coding: utf-8 -*-
.\" Copyright (c) 2023 Gwen Weinholt
.\" SPDX-License-Identifier: MIT
.\" More than usual of this manual page is taken from RnRS.
.TH call-with-current-continuation 3scm 2023-02-16 "" "Scheme Programmer's Manual"
.SH NAME
call-with-current-continuation, call/cc \- capture the current continuation
.
.SH LIBRARY
.nf
.BR "(import (rnrs))" "                     ;R6RS"
.BR "(import (rnrs base))" "                ;R6RS"
.BR "(import (scheme r5rs))" "              ;R7RS"
.BR "(import (scheme base))" "              ;R7RS"
.
.SH SYNOPSIS
.nf
.BI "(call-with-current-continuation " proc )
.BI "(call/cc " proc )
.
.SH DESCRIPTION
Packages the current continuation as an "escape procedure" and passes
it as an argument to
.IR proc .
.PP
The escape procedure is a procedure that, if it is later called, will
abandon whatever continuation is in effect at that later time and will
instead reinstate the continuation that was in effect when the escape
procedure was created.
.
.TP
.B Unlimited lifetime of the continuation
The escape procedure that is passed to
.I proc
has unlimited
extent just like any other procedure in Scheme. It may be
stored in variables or data structures and may be called as
many times as desired.
.IP
Escape procedures in many other languages can only be called once. It
is also a common limitation that escape procedures can only be called
"upwards", meaning that it's impossible to re-enter a context once it
has been returned from. This allows you to implement simpler things
like exception handling, but it is very limited compared to what
.B call/cc
provides.
.
.TP
.B Tail call optimization
If a call to
.B call/cc
occurs in a tail context, the call to
.I proc
is also in a tail context.
.
.TP
.B Arity of the escape procedure
The escape procedure accepts the same number of arguments
as the continuation of the original call to
.BR call/cc .
.IP
Simply speaking, this is any number of arguments if the call
happened in a
.BR begin (7scm)
and a single argument if it happened in the evaluation of an argument
to a procedure call. If the continuation was created by
.BR call-with-values (3scm)
then it accepts the same number of arguments as the
.I consumer
procedure.
.
.TP
.B Interaction with dynamic-wind
Calling the escape procedure may cause the invocation of
.I before
and
.I after
procedures installed using
.BR dynamic-wind (3scm).
Another way of saying this is that calling an escape procedure
reenters the dynamic extent of the call to
.BR call/cc ,
and thus restores its dynamic environment. This is relevant for
things like parameters,
.BR guard (7scm),
.BR with-exception-handler (3scm),
and
.BR with-input-from-file (3scm).
.
.\" Verbatim from R6RS, feels out of place
\" .TP
\" .B General information about dynamic extents
\" .
\" For a procedure call, the time between when it is initiated
\" and when it returns is called its dynamic extent. In Scheme,
\" .B call/cc
\" allows reentering a dynamic extent after its procedure call has
\" returned. Thus, the dynamic extent of a call may not be a single,
\" connected time period.
\" .IP
\" Some operations described in the report acquire information in
\" addition to their explicit arguments from the dynamic environment. For
\" example,
\" .B call/cc
\" accesses an implicit context established by
\" .BR dynamic-wind (3scm),
\" and the
\" .BR raise (3scm)
\" procedure
\" accesses the current exception handler.
\" .IP
\" The operations that modify the dynamic environment do so
\" dynamically, for the dynamic extent of a call to a procedure
\" like
\" .BR dynamic-wind (3scm)
\" or
\" .BR with-exception-handler (3scm).
\" When such a call returns, the previous dynamic environment is
\" restored. The dynamic environment can be thought of as part of the
\" dynamic extent of a call. Consequently, it is captured by
\" .B call/cc,
\" and restored by invoking the escape procedure it creates.
.
.
.SH "IMPLEMENTATION NOTES"
.
Most common implementation strategies for Scheme use a stack for
function calls. You may think of
.B call/cc
as a procedure that takes a copy of that stack and wraps it inside a
procedure object. That procedure object, when called, overwrites the
current stack with the contents of the captured stack. Some extra
logic is also needed for running the
.BR dynamic-wind
handlers.
.PP
Note however that this explanation is overly concrete and if that was
the specification then many optimizations performed by compilers would
be impossible. Because
.B call/cc
is specified on a language-level, not a concrete machine level, many
optimizations can be performed in intermediate steps of the compiler.
As an example, obvious uses of
.B call/cc
to return from a function can be optimized into function returns. No
copying of the stack is needed for these simple case.
.PP
A full discussion on the various methods for implementing
continuations is out of scope for this manual page, but here are some
pointers for the interested reader: continuation-passing style, Cheney
on the M.T.A. (CHICKEN) and segmented stacks (Chez Scheme).
.
.SH "RETURN VALUES"
.
There are two different ways for this procedure to return.
It can return via a call to the escape procedure and will in
that case return whatever arguments were passed to that procedure.
Alternatively, it can return by
.I proc
returning normally and in that case returns whatever values
.I proc
returned.
.
.SH EXAMPLES
.
The following examples show only some ways in which
.B call/cc
is used. If all real uses
were as simple as these examples, there would be no need
for a procedure with the power of
.BR call/cc .
.PP
.EX
(call/cc
 (lambda (return)
   (return 47)
   (display "This does not run\n")))
        => 47

(call-with-current-continuation
  (lambda (exit)
    (for-each (lambda (x)
                (when (negative? x)
                  (exit x)))
              '(54 0 37 -3 245 19))
    #t))
        => -3

(define list-length
  (lambda (obj)
    (call-with-current-continuation
      (lambda (return)
         (letrec ((r
                   (lambda (obj)
                     (cond ((null? obj) 0)
                           ((pair? obj)
                            (+ (r (cdr obj)) 1))
                           (else (return #f))))))
           (r obj))))))

(list-length '(1 2 3 4))  =>  4
(list-length '(a b . c))  =>  #f

(call-with-current-continuation procedure?)
        => #t
.EE
.
.SH "APPLICATION USAGE"
.
Direct usages, as for returning from a procedure, are unusual in
practice. More commonly the usages are hidden behind abstractions that
implement new control mechanisms. Concurrent ML, coroutines and other
forms of concurrency, exception handling, indeterminism and other
control constructs can be implemented by the Scheme developer in user
code.
.
.SH RATIONALE
.
The following is quoted verbatim from R2RS (AI Memo No. 848, 1985).
.IP
The classic use of
.B call-with-current-continuation is for structured,
non-local exits from loops or procedure bodies, but in fact
.B call-with-current-continuation
is extremely useful for implementing a wide variety of advanced
control structures.
.IP
Whenever a Scheme expression is evaluated there is a \fIcontinuation\fP wanting
the result of the expression. The continuation represents an entire (default)
future for the computation. If the expression is evaluated at top level, for
example, then the continuation will take the result, print it on the screen,
prompt for the next input, evaluate it, and so on forever. Most of the time
the continuation includes actions specified by user code, as in a continuation
that will take the result, multiply it by the value stored in a local variable,
add seven, and give the answer to the top level continuation to be printed.
Normally these ubiquitous continuations are hidden behind the scenes and
programmers donâ€™t think much about them. On rare occasions, however, when
programmers need to do something fancy, then they may need to deal with
continuations explicitly,
.B call-with-current-continuation
allows Scheme programmers to do that by creating a procedure that acts
just like the current continuation.
.
.SH COMPATIBILITY
.
This procedure is the same in all versions of Scheme since R2RS. It is
usually missing in other languages.
.
.SH ERRORS
This procedure can raise exceptions with the following condition types:
.TP
.BR &assertion " (R6RS)"
The wrong number of arguments was passed or an argument was outside its domain.
In particular,
.I proc
must be a procedure hat accepts one argument.
.TP
R7RS
The assertions described above are errors.
Implementations may signal an error, extend the procedure's
domain of definition to include such arguments,
or fail catastrophically.
.
.SH "SEE ALSO"
.
.BR dynamic-wind (3scm),
.BR getcontext (3),
.BR longjmp (3)
.
.SH STANDARDS
R4RS,
IEEE Scheme,
R5RS,
R6RS,
R7RS
.
.SH HISTORY
.
.\" Insert from R2RS
The following is quoted verbatim from R2RS (AI Memo No. 848, 1985).
.IP
Most serious programming languages incorporate one or more special purpose
escape constructs with names like \f[CR]exit\fP, \f[CR]return\fP, or even \f[CR]goto\fP. In 1965,
however, Peter Landin invented a general purpose escape operator called the
J-operator. John Reynolds described a simpler but equally powerful construct
in 1972. The \f[CR]catch\fP special form described by Sussman and Steele in the 1975
report on Scheme is exactly the same as Reynolds's construct, though its name
came from a less general construct in MacLisp. The fact that the full power
of Scheme's \f[CR]catch\fP could be obtained using a procedure rather than a special
form was noticed in 1982 by the implementors of Scheme 311, and the name
\f[CR]call-with-current-continuation\fP was coined later that year. Although the
name is descriptive, some people feel it is too long and have taken to calling
the procedure \f[CR]call/cc\f[CR].
.
.SH AUTHORS
This page is part of the
.I scheme-manpages
project.
It includes materials from the RnRS documents.
More information can be found at
.UR https://github.com/schemedoc/manpages/
.UE .
.
.SH BUGS
.
Using
.B call/cc
in deeply nested recursions can cause performance problems in simple
implementations. An example of a bad case is when
.BR map (3scm)
is implemented using recursion and the procedure passed to it
uses
.BR guard (7scm).
Because
.BR guard (7scm)
uses
.B call/cc
internally, each processed element of the list will grow the stack.
The call to
.BR map (3scm)
that was expected to take linear time will then instead take quadratic
time. Therefore implementations that have a simple
.B call/cc
implementation should avoid having a recursive definition of
.BR map (3scm).
