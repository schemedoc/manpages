.\" -*- mode: nroff; coding: utf-8 -*-
.\" Copyright (c) 2021 Gwen Weinholt
.\" SPDX-License-Identifier: MIT
.TH error 3scm 2021-03-07 "" "Scheme Programmer's Manual"
.SH NAME
error, assertion-violation \- raise an exception
.
.SH LIBRARY
.nf
.BR "(import (rnrs))" "                     ;R6RS"
.BR "(import (rnrs base))" "                ;R6RS"
.BR "(import (scheme base))" "              ;R7RS"
.
.SH SYNOPSIS
.nf
.BI "(error " who " " message " " irritant\fR1\fP " ...)" "                \fR;R6RS"
.BI "(assertion-violation " who " " message " " irritant\fR1\fP " ...)" "  \fR;R6RS"

.BI "(error " message " " irritant\fR1\fP " ...)" "                    \fR;R7RS"
.
.SH DESCRIPTION

These procedures raise an exception.
.PP
The
.B error
procedure should be called when an error has occurred, typically
caused by something that has gone wrong in the interaction of the
program with the external world or the user.
.PP
The
.B assertion-violation
procedure should be called when an invalid call to a procedure was
made, either passing an invalid number of arguments, or passing an
argument that it is not specified to handle.
.PP
The
.I who
argument should describe the procedure or operation that detected the
exception. The
.I message
argument should describe the exceptional situation. The
.I irritants
should be the arguments to the operation that detected the operation.
.TP
.B R6RS
The condition object provided with the exception has the following
condition types:
.
.RS
.RS
.IP \(bu 4n
If
.I who
is not
.BR #f ,
the condition has condition type
.BR &who ,
with
.I who
as the value of its field. In that case,
.I who
should be the name of the procedure or entity that
detected the exception.
If it is
.BR #f ,
the condition does not have
condition type
.BR &who .
.
.IP \(bu 4n
The condition has condition type
.BR &message ,
with
.I message
as the value of its field.
.
.IP \(bu 4n
The condition has condition type
.BR &irritants ,
and its field has as its value a list of the
.IR irritant s.
.RE
.RE
.
.IP
Moreover, the condition created by
.B error
has condition
type
.BR &error ,
and the condition created by
.B assertion-violation
has condition type
.BR &assertion .
.TP
.B R7RS
Raises an exception as if by calling
.BR raise (3scm)
on a newly allocated implementation-defined object which encapsulates
the information provided by
.IR message ,
as well as any
.IR irritant s.
The procedure
.B error-object?
must return
.B #t
on such objects.
.IP
There is no
.B assertion-violation
procedure. Instead,
.B error
is used.
.
\" .SH "IMPLEMENTATION NOTES"
\" .
.SH "RETURN VALUES"
.
These procedures do not return.
.SH EXAMPLES
.
.EX
;; R6RS
(define (fac n)
  (when (not (integer-valued? n))
    (assertion-violation 'fac "non-integral argument" n))
  (when (negative? n)
    (assertion-violation 'fac "negative argument" n))
  (letrec ((loop (lambda (n r)
                    (if (zero? n)
                        r
                        (loop (- n 1) (* r n))))))
    (loop n 1)))

(fac 5)    => 120
(fac 4.5)  => &assertion exception
(fac -3)   => &assertion exception

;; R7RS
(define (null-list? l)
  (cond ((pair? l) #f)
        ((null? l) #t)
        (else
          (error
            "null-list?: argument out of domain"
            l))))
.EE
.
.SH "APPLICATION USAGE"
.
These procedures are used when there is an error in the program.
.
.SH RATIONALE
.
The
difference between an error and assertion is that an assertion is
caused by faults internal to the program, i.e. one would be inclined
to say that a program which crashes from an
.B &assertion
is buggy, whereas if it crashes from an
.B &error
then it crashed due to external circumstances.
.
.SH COMPATIBILITY
.
The
.B assertion-violation
procedure is absent from R7RS. Code that needs to work on both R6RS and R7RS
can define an
.B assertion-violation
procedure that calls
.B error
and moves the
.I who
argument into the
.IR message .
.PP
Previous to R6RS and R7RS, programs would either contain a deliberate
error and hope that it would be detected and reported, or they would
use SRFI-23. Most Scheme implementations did have some built-in error
reporting mechanism that could be used, but it would be non-portable.
.
.SH ERRORS
This procedure can raise exceptions with the following condition types:
.TP
.BR &assertion " (R6RS)"
The wrong number of arguments was passed or an argument was outside its domain.
In particular,
.I who
must be a string or a symbol or
.BR #f
and
.I message
must be a string.
.TP
R7RS
The assertions described above are errors.
Implementations may signal an error, extend the procedure's
domain of definition to include such arguments,
or fail catastrophically.
.
.SH "SEE ALSO"
.
.BR raise (3scm),
.BR assert (7scm),
.BR guard (7scm)
.
.SH STANDARDS
R6RS,
R7RS
.
.SH HISTORY
.
The
.B error
procedure is absent from R2RS to R5RS. Before R2RS, Scheme had access
to the
.B error
function in MacLISP. Programs in the R4RS and R5RS era often used
SRFI-23.
.SH AUTHORS
This page is part of the
.I scheme-manpages
project.
It includes materials from the RnRS documents.
More information can be found at
.UR https://github.com/schemedoc/manpages/
.UE .
\" .
\" .SH BUGS
\" .
