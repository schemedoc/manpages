.\" -*- mode: nroff; coding: utf-8 -*-
.\" Copyright (c) 2022 Gwen Weinholt
.\" SPDX-License-Identifier: MIT
.TH finite? 3scm 2022-05-03 "" "Scheme Programmer's Manual"
.SH NAME
finite?, infinite?, nan? \- floating-point classification procedures
.
.SH LIBRARY
.nf
.BR "(import (rnrs))" "                     ;R6RS"
.BR "(import (rnrs base))" "                ;R6RS"
.BR "(import (scheme inexact))" "           ;R7RS"
.BR "(import (rnrs arithmetic flonums))" "  ;R6RS"
.
.SH SYNOPSIS
.nf
;; R6RS
.BI "(finite? " x )
.BI "(infinite? " x )
.BI "(nan? " x )

.BI "(flfinite? " fl )
.BI "(flinfinite? " fl )
.BI "(flnan? " fl )

;; R7RS
.BI "(finite? " z )
.BI "(infinite? " z )
.BI "(nan? " z )
.
.SH DESCRIPTION
.
These numerical predicates test a number object for a particular
property, returning
.B #t
or
.BR #f .
.TP
.B finite?
Tests whether
.I x
is not an infinity and not a NaN.
.TP
.B infinite?
Tests whether
.I x
is an infinity.
.TP
.B nan?
Tests whether
.I x
is a NaN.
.PP
The R7RS variants are extended to support complex numbers (if the
implementation supports complex numbers).
.\" The description in R7RS forgets that NaNs other than +nan.0 exist.
.\" The "on complex numbers" part of the description doesn't make
.\" sense; reals are also complex. Probably someone was thinking of
.\" some internal representation rather than the numeric tower.
.TP
.B finite?
Tests whether the real and imaginary parts of
.I z
are finite.
.TP
.B infinite?
Tests whether the real or imaginary parts of
.I z
are infinite.
.TP
.B nan?
Tests whether the real or imaginary parts of
.I z
are NaN.
.
.PP
The flonum variants in R6RS are restricted to flonum arguments.
.PP
The results may be unreliable because a small inaccuracy may affect
the result.
.
\" .SH "IMPLEMENTATION NOTES"
\" .
.SH "RETURN VALUES"
.
These procedures return a single value; a boolean object.
.
.SH EXAMPLES
.
.EX
(finite? +inf.0)       => #f
(finite? 5)            => #t
(finite? 5.0)          => #t
(infinite? 5.0)        => #f
(infinite? +inf.0)     => #t
(nan? 32)              => #f

;; R7RS examples
(finite? +inf.0)       => #f
(finite? 3.0+inf.0i)   => #f
(infinite? +inf.0)     => #t
(infinite? +nan.0)     => #f
(infinite? 3.0+inf.0i) => #t
(nan? +nan.0)          => #t
(nan? +nan.0+5.0i)     => #t
(nan? 1+2i)            => #f
.EE
.
.SH "APPLICATION USAGE"
.
A common use for the
.B nan?
procedure is to replace NaNs with some another value, such as zero.
.
It's not possible to check for NaNs with code like
\f[CR](= x +nan.0)\fP.
\" .SH RATIONALE
\" .
.SH COMPATIBILITY
.
The variants in R6RS only support real numbers.
.SH ERRORS
This procedure can raise exceptions with the following condition types:
.TP
.BR &assertion " (R6RS)"
The wrong number of arguments was passed or an argument was outside its domain.
In particular, the flonum variants require a flonum argument.
.TP
R7RS
The assertions described above are errors.
Implementations may signal an error, extend the procedure's
domain of definition to include such arguments,
or fail catastrophically.
.
.SH "SEE ALSO"
.
.BR zero? (3scm)
.SH STANDARDS
R6RS,
R7RS
.
.SH HISTORY
.\" The non-numbered "language changes" appendix does not say
.\" that R6RS already had these procedures, so maybe they were
.\" invented independently.
These procedures are new in R6RS and were later also added in R7RS
with names that coincide with those in R6RS.
.PP
The C99 language and POSIX offer a more detailed classification which
includes subnormals, see
.BR fpclassify (3).
.SH AUTHORS
This page is part of the
.I scheme-manpages
project.
It includes materials from the RnRS documents.
More information can be found at
.UR https://github.com/schemedoc/manpages/
.UE .
\" .
\" .SH BUGS
\" .
