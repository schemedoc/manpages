.\" -*- mode: nroff; coding: utf-8 -*-
.\" Copyright (c) 2023 G. Weinholt
.\" SPDX-License-Identifier: MIT
.TH fold-left 3scm 2023-08-11 "" "Scheme Programmer's Manual"
.SH NAME
fold-left, fold-right \- list iteration and recursion operators
.
.SH LIBRARY
.nf
.BR "(import (rnrs))" "                     ;R6RS"
.BR "(import (rnrs lists))" "               ;R6RS"
.
.SH SYNOPSIS
.nf
.BI "(fold-left " combine " " nil " " list1 " " list2 " ... " listn )
.BI "(fold-right " combine " " nil " " list1 " " list2 " ... " listn )
.
.SH DESCRIPTION
.
These procedures apply
.I combine
to elements of the lists in left to right order or right to left
order. They also pass it an argument (called the accumulator) which
starts out as
.I nil
and is updated to the return value of
.I combine
after each application.
.PP
The
.B fold-left
procedure passes the accumulator as the first argument
to
.I combine
and
.B fold-right
passes it as the last argument.
.
The other arguments are the elements from the lists, i.e., the first
time
.I combine
it called it gets the first (or last) element from each list, then the
second (or second to last) element from each list, etc. The
.I combine
procedure should return a single value; the new accumulator.
.PP
The accumulator is returned when the lists have been exhausted. This
implies that
.I nil
is returned immediately if the lists are empty.
.
\" The fold-left procedure iterates the combine procedure over an
\" accumulator value and the elements of the lists from left to right,
\" starting with an accumulator value of nil . More specifically,
\" fold-left returns nil if the lists are empty. If they are not empty,
\" combine is first applied to nil and the respective first elements of
\" the lists in order. The result becomes the new accumulator value, and
\" combine is applied to the new accumulator value and the respective
\" next elements of the list. This step is repeated until the end of the
\" list is reached; then the accumulator value is returned.
.
\" The fold-right procedure iterates the combine procedure over the
\" elements of the lists from right to left and an accumulator value,
\" starting with an accumulator value of nil . More specifically,
\" fold-right returns nil if the lists are empty. If they are not empty,
\" combine is first applied to the respective last elements of the lists
\" in order and nil . The result becomes the new accumulator value, and
\" combine is applied to the respective previous elements of the lists
\" and the new accumulator value. This step is repeated until the
\" beginning of the list is reached; then the accumulator value is
\" returned.
.
.PP
The
.I combine
procedure is always called in the same dynamic environment as
.B fold-left
or
.B fold-right
itself.
.
It should not mutate the list arguments.
.
.SH "IMPLEMENTATION NOTES"
.
Implementation responsibilities: The implementation should check that
the lists all have the same length. The implementation must check the
restrictions on combine to the extent performed by applying it as
described. An implementation may check whether combine is an
appropriate argument before applying it.
.
.SH "RETURN VALUES"
.
These procedures return a single value; the last accumulator value.
.
.SH EXAMPLES
.
.EX
(fold-left + 0 '(1 2 3 4 5))
    =>  15

(fold-left (lambda (a e) (cons e a)) '()
           '(1 2 3 4 5))
    =>  (5 4 3 2 1)

(fold-left (lambda (count x)
             (if (odd? x) (+ count 1) count))
           0
           '(3 1 4 1 5 9 2 6 5 3))
    =>  7

(fold-left (lambda (max-len s)
             (max max-len (string-length s)))
           0
           '("longest" "long" "longer"))
    =>  7

(fold-left cons '(q) '(a b c))
    =>  ((((q) . a) . b) . c)

(fold-left + 0 '(1 2 3) '(4 5 6))
    =>  21


(fold-right + 0 '(1 2 3 4 5))
    =>  15

(fold-right cons '() '(1 2 3 4 5))
    =>  (1 2 3 4 5)

(fold-right (lambda (x l)
              (if (odd? x) (cons x l) l))
            '()
            '(3 1 4 1 5 9 2 6 5))
    =>  (3 1 1 5 9 5)

(fold-right cons '(q) '(a b c))
    =>  (a b c q)

(fold-right + 0 '(1 2 3) '(4 5 6))
    =>  21

;; Side-effects in fold are not pretty,
;; but this should highlight the differences
;; between fold-left and fold-right.

(fold-left (lambda (acc x)
             (write (list acc x))
             (newline)
             (+ acc x))
           0
           '(1 2 3 5 7 11))
  -> (0 1)
  -> (1 2)
  -> (3 3)
  -> (6 5)
  -> (11 7)
  -> (18 11)
    => 29

(fold-right (lambda (x acc)
              (write (list x acc))
              (newline)
              (+ x acc))
            0
            '(1 2 3 5 7 11))
  -> (11 0)
  -> (7 11)
  -> (5 18)
  -> (3 23)
  -> (2 26)
  -> (1 28)
    => 29
.EE
.
.SH "APPLICATION USAGE"
.
These are higher-order procedures that express list iteration
and recursion. They are often more compact and expressive than
writing the corresponding code without them.
.
\" .SH RATIONALE
\" .
.SH COMPATIBILITY
.
These procedures are unique to R6RS, but equivalents can be
found in SRFI-1.
.
.SH ERRORS
This procedure can raise exceptions with the following condition types:
.TP
.BR &assertion " (R6RS)"
The wrong number of arguments was passed or an argument was outside its domain.
In particular,
the lists should all have the same length and
.I combine
must be a procedure. It should accept one more argument than there are
lists and return a single value.
.
.SH "SEE ALSO"
.
.BR map (3scm),
.BR let (7scm),
.BR do (7scm)
.
.SH STANDARDS
R6RS
.
.SH HISTORY
.
These procedures appear in SRFI-1 under the names
.B fold
and
.BR fold-right
where they are respectively referred to as "[t]he fundamental list
iterator" and "[t]he fundamental list recursion operator".
.
.SH AUTHORS
This page is part of the
.I scheme-manpages
project.
It includes materials from the RnRS documents.
More information can be found at
.UR https://github.com/schemedoc/manpages/
.UE .
\" .
\" .SH BUGS
\" .
