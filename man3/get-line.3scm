.\" -*- mode: nroff; coding: utf-8 -*-
.\" Copyright (c) 2022 Gwen Weinholt
.\" SPDX-License-Identifier: MIT
.TH get-line 3scm 2022-05-06 "" "Scheme Programmer's Manual"
.SH NAME
get-line, read-line \- read a line from a port
.
.SH LIBRARY
.nf
.BR "(import (rnrs))" "                     ;R6RS"
.BR "(import (rnrs io ports))" "            ;R6RS"
.BR "(import (scheme base))" "              ;R7RS"
.
.SH SYNOPSIS
.nf
.BI "(get-line " textual-input-port ) "       ;R6RS"
.BI "(read-line)" "                         ;R7RS"
.BI "(read-line " textual-input-port ) "      ;R7RS"
.
.SH DESCRIPTION
.
Reads from
.I textual-input-port
up to and including the linefeed character or end of file, decoding
characters in the same manner as
.BR get-string-n (3scm)
and
.BR get-string-n! (3scm).
.PP
If a linefeed character is read then a string containing all of the
text up to (but not including) the linefeed character is returned, and
the port is updated to point just past the linefeed character.
.PP
If an end of file is encountered before any linefeed character is
read, but some characters have been read and decoded as characters,
then a string containing those characters is returned.
.PP
If an end of file is encountered before any characters are read, the
end-of-file object is returned.
.
.TP
.B R6RS
If the port's end-of-line style is not \f[CR]none\fP then all line
endings will be read as linefeed characters.
.
.TP
.B R7RS
For the purpose of this procedure, an end of line consists of either a
linefeed character, a carriage return character, or a sequence of a
carriage return character followed by a linefeed character.
Implementations may also recognize other end of line characters or
sequences.
.
.IP
The default value for
.I textual-input-port
is the value returned by
.BR current-input-port (3scm).
.
\" .SH "IMPLEMENTATION NOTES"
\" .
.SH "RETURN VALUES"
.
These procedures return a single value, which is either a string or
an end of file object.
.SH EXAMPLES
.
.EX
;; Return all records in /etc/passwd
(with-input-from-file "/etc/passwd"
  (lambda ()
    (let lp ()
      (let ((line (get-line (current-input-port))))
         (if (eof-object? line)
             '()
             (cons line (lp)))))))
.EE
.
.SH "APPLICATION USAGE"
.
This procedure is used to read from linefeed-delimited files.
.
\" .SH RATIONALE
\" .
.SH COMPATIBILITY
.
The R6RS and R7RS variants of this procedure are identical with some
subtle differences in how linefeeds are recognized. In R6RS, the
port's transcoder is responsible for recognizing character sequences
that make up linefeeds, and to translate them into a single linefeed
character. This part of the transcoder is active if the eol-style is
not \f[CR]none\fP.
.P
The R7RS variant essentially works as if ports can only have eol-style
\f[CR]none\fP and moves the recognition of linefeeds into the
.B read-line
procedure.
.
This also implies that
.B read-char (3scm)
should return each character that makes up a linefeed sequence, such
as carriage return followed by linefeed.
.PP
R6RS has a single end-of-file object, but R7RS implementations may
have several.
.SH ERRORS
This procedure can raise exceptions with the following condition types:
.TP
.BR &i/o-read " (R6RS)"
There was a read error that occurred during an I/O operation.
.TP
.BR &assertion " (R6RS)"
The wrong number of arguments was passed or an argument was outside its domain.
.TP
R7RS
The situations described above are errors.
Implementations may signal an error, extend the procedure's
domain of definition to include such arguments,
or fail catastrophically.
.
.SH "SEE ALSO"
.
.BR get-char (3scm),
.BR read (3scm),
.BR eol-style (7scm)
.SH STANDARDS
R6RS,
R7RS
.
.SH HISTORY
.
This procedure first appeared in R6RS. The R7RS variant is described
with text mostly taken from R6RS.
.SH AUTHORS
This page is part of the
.I scheme-manpages
project.
It includes materials from the RnRS documents.
More information can be found at
.UR https://github.com/schemedoc/manpages/
.UE .
\" .
\" .SH BUGS
\" .
