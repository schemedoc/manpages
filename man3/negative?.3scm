.\" -*- mode: nroff; coding: utf-8 -*-
.\" Copyright (c) 2022 Gwen Weinholt
.\" SPDX-License-Identifier: MIT
.TH negative? 3scm 2022-05-10 "" "Scheme Programmer's Manual"
.SH NAME
negative?, positive?, odd?, even?, flnegative?, flpositive?, flodd?, fleven?, fxnegative?, fxpositive?, fxodd?, fxeven?\- numerical predicates
.
.SH LIBRARY
.nf
.BR "(import (rnrs))" "                     ;R6RS"
.BR "(import (rnrs base))" "                ;R6RS"
.BR "(import (scheme r5rs))" "              ;R7RS"
.BR "(import (scheme base))" "              ;R7RS"
.BR "(import (rnrs arithmetic flonums))" "  ;R6RS"
.BR "(import (rnrs arithmetic fixnums))" "  ;R6RS"
.
.SH SYNOPSIS
.nf
.BI "(negative? " x )
.BI "(positive? " x )
.BI "(odd? " n )
.BI "(even? " n )

;; R6RS
.BI "(flnegative? " fl )
.BI "(flpositive? " fl )
.BI "(flodd? " fl )
.BI "(fleven? " fl )
.BI "(fxnegative? " fx )
.BI "(fxpositive? " fx )
.BI "(fxodd? " fx )
.BI "(fxeven? " fx )
.
.SH DESCRIPTION
These numerical predicates test a number object for a particular
property, returning
.B #t or
.BR #f .
.TP
.B Properties tested
The predicates tests the following properties.
.TS
tab(@);
c l.
\fBzero?\fP@tests if the number is = to zero
\fBpositive?\fP@tests if the number is greater than zero
\fBnegative?\fP@tests if the number is less than zero
\fBodd?\fP@tests if the number is odd
\fBeven?\fP@tests if the number is even
.TE
.TP
.B Flonum variants
These variants restrict their arguments to flonums.
.TP
.B Fixnum variants
These variants restrict their arguments to fixnums.
.PP
Unless the number is exact, the results may be unreliable because a
small inaccuracy may affect the result.
.
\" .SH "IMPLEMENTATION NOTES"
\" .
.SH "RETURN VALUES"
.
Returns a single value; a boolean.
.SH EXAMPLES
.
.EX
(zero? +0.0)        =>  #t
(zero? -0.0)        =>  #t
(zero? +nan.0)      =>  #f
(positive? +inf.0)  =>  #t
(negative? -inf.0)  =>  #t
(positive? +nan.0)  =>  #f
(negative? +nan.0)  =>  #f
.EE
.
\" .SH "APPLICATION USAGE"
\" .
\" .SH RATIONALE
\" .
.SH COMPATIBILITY
.
These procedures work the same in all Scheme revisions since R2RS.
.
.SH ERRORS
This procedure can raise exceptions with the following condition types:
.TP
.BR &assertion " (R6RS)"
The wrong number of arguments was passed or an argument was outside its domain.
.TP
R7RS
The assertions described above are errors.
Implementations may signal an error, extend the procedure's
domain of definition to include such arguments,
or fail catastrophically.
.
.SH "SEE ALSO"
.
.BR > (3scm),
.BR finite? (3scm)
.SH STANDARDS
R4RS,
IEEE Scheme,
R5RS,
R6RS,
R7RS
.
.SH HISTORY
.
These procedures were first introduced in R2RS. Scheme before then,
running on MacLisp, had access to similar predicates:
.BR zerop ,
.BR plusp ,
.BR minusp ,
and
.BR oddp .
LISP 1.5 had a
.BR minusp
predicate that returned true for negative numbers, including -0.
It also had
.B zerop
and
.B onep
predicates. These were specified to true when the absolute difference
between the argument and zero or one, respectively, is less than 3e-6.
.SH AUTHORS
This page is part of the
.I scheme-manpages
project.
It includes materials from the RnRS documents.
More information can be found at
.UR https://github.com/schemedoc/manpages/
.UE .
\" .
\" .SH BUGS
\" .
