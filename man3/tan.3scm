.\" -*- mode: nroff; coding: utf-8 -*-
.\" Copyright © 2022 Göran Weinholt
.\" SPDX-License-Identifier: MIT
.TH tan 3scm 2022-05-08 "" "Scheme Programmer's Manual"
.SH NAME
exp, log, sin, cos, tan, asin, acos, atan, flexp, fllog, flsin, flcos, fltan, flasin, flacos, flatan \- transcendental functions
.
.SH LIBRARY
.nf
.BR "(import (rnrs))" "                     ;R6RS"
.BR "(import (rnrs base))" "                ;R6RS"
.BR "(import (rnrs arithmetic flonums))" "  ;R6RS"
.BR "(import (scheme r5rs))" "              ;R7RS"
.BR "(import (scheme inexact))" "           ;R7RS"
.
.SH SYNOPSIS
.nf
.BI "(exp " z )
.BI "(log " z )
.BI "(log " z1 " " z2 )
.BI "(sin " z )
.BI "(cos " z )
.BI "(tan " z )
.BI "(asin " z )
.BI "(acos " z )
.BI "(atan " z )
.BI "(atan " y " " x )

;; From (rnrs arithmetic flonums)
.BI "(flexp " fl )
.BI "(fllog " fl )
.BI "(fllog " fl1 " " fl2 )
.BI "(flsin " fl )
.BI "(flcos " fl )
.BI "(fltan " fl )
.BI "(flasin " fl )
.BI "(flacos " fl )
.BI "(flatan " fl )
.BI "(flatan " fl1 " " fl2 )
.
.SH DESCRIPTION
These procedures compute the usual transcendental functions.
.PP
In general, the transcendental functions log, asin (arcsine), acos
(arccosine), and atan (arctangent) are multiply defined.
.TP
.B exp
The
.B exp
procedure computes the base-\fIe\fP exponential of
.IR z .
.
.
.TP
.B log with one argument
The
.B log
procedure with a single argument computes
the natural logarithm of
.IR z .
.IP
The value of log \fIz\fP is defined to be the one whose imaginary
part lies in the range from \[mi]\[*p] (inclusive if \[mi]0.0 is
distinguished, exclusive otherwise) to \[*p] (inclusive).
.IP
The value of log 0 is mathematically undefined.
.
However, \f[CB](log 0.0)\fP returns \f[CB]-inf.0\fP if the
implementation supports infinities, and \f[CB](log -0.0)\fP returns
approximately \f[CB]-inf.0+\[*p]i\fP if the implementation supports
minus zero.
.IP
The value of log \fIz\fP for non-real \fIz\fP is defined in terms of
log on real numbers as
.sp
                log \fIz\fP = log |\fIz\fP| + (angle \fIz\fP)i
.sp
where angle \fIz\fP is the angle of \fIz\fP = \fIa\fP\[md]exp(i\fIb\fP) specified as:
.sp
              angle \fIz\fP = \fIb\fP + 2\[*p]\fIn\fP
.sp
with \[mi]\[*p] \[<=] angle z \[<=] \[*p] and
angle z = b + 2\[*p]\fIn\fP
for some integer \fIn\fP.
.
.TP
.B log with two arguments, arcsin, arccos and arctangent
\f[CB](log \fIz1 z2\fP)\fR computes the base-\fIz2\fP logarithm of \fIz1\fP.
With the one-argument version of \fBlog\fP defined as above, the
value is:
.sp
        log z b = (log z)\[f/](log b)
.
.TP
.B sin, cos, tan
The
.BR sin ,
.BR cos ,
and
.B tan
procedures compute the sine, cosine and tangent.
.
.TP
.B arcsin, arccos and arctangent
.\" R7RS doesn't define log with two arguments here
The
.BR asin ,
.BR acos ,
and
.B atan
procedures compute arcsine, arccosine, and arctangent, respectively.
.IP
With the one-argument version of \fBlog\fP defined as above, their
values are according to the following formulas:
.sp
         asin z = \[mi]i log(i\fIz\fP + sqrt(1 - \fIz\fP\[S2]))
         acos z = \[*p]/2 \[mi] asin \fIz\fP
         atan z = (log(1 + i\fIz\fP) \[mi] log(1 - i\fIz\fP))/(2i)
.TP
.B atan with two arguments
The two-argument variant of atan computes
\f[CB](angle (make-rectangular \fIx y\fP))\fR.
.
In R7RS implementations this is even the case in implementations that
don't support complex numbers.
.IP
The range of \f[CB](atan \fIy x\fP)\fR is as in the following table.
The asterisk (\[**]) indicates that the entry applies to implementations
that distinguish minus zero (as in IEEE 754).
.TS
tab(@);
c s s s
c l l l.
Table showing atan2 ranges
@\fBy condition\fP@\fBx condition\fP@\fBrange of result r\fP
@y = 0.0@x > 0.0@0.0
\[**]@y = \[pl]0.0@x > 0.0@\[pl]0.0
\[**]@y = \[mi]0.0@x > 0.0@\[mi]0.0
@y > 0.0@x > 0.0@0.0 < r < \[*p]\[f/]2
@y > 0.0@x = 0.0@\[*p]\[f/]2
@y > 0.0@x < 0.0@\[*p]\[f/]2 < r < \[*p]
@y = 0.0@x < 0@\[*p]
\[**]@y = \[pl]0.0@x < 0.0@\[*p]
\[**]@y = \[mi]0.0@x < 0.0@\[mi]\[*p]
@y < 0.0@x < 0.0@\[mi]\[*p] < r < \[mi]\[*p]\[f/]2
@y < 0.0@x = 0.0@\[mi]\[*p]\[f/]2
@y < 0.0@x > 0.0@\[mi]\[*p]\[f/]2 < r < 0.0
@y = 0.0@x = 0.0@undefined
\[**]@y = \[pl]0.0@x = \[pl]0.0@\[pl]0.0
\[**]@y = \[mi]0.0@x = \[pl]0.0@\[mi]0.0
\[**]@y = \[pl]0.0@x = \[mi]0.0@\[*p]
\[**]@y = \[mi]0.0@x = \[mi]0.0@\[mi]\[*p]
\[**]@y = \[pl]0.0@x = 0@\[*p]\[f/]2
\[**]@y = \[mi]0.0@x = 0@\[mi]\[*p]\[f/]2
.TE
.IP
The two-argument version of \fBatan\fP is commonly called atan2.
Please refer to to the following sources for more detailed discussion
of branch cuts, boundary conditions, and implementation of these
functions.
.IP
Guy Lewis Steele Jr.
.IR "Common Lisp: The Language" ,
second edition.
Digital Press, Burlington MA, 1990.
.IP
Paul Penfield, Jr. Principal values and branch cuts in complex APL. In
.IR "APL 81 Conference Proceedings" ,
pages 248–256. ACM SIGAPL, San Francisco, September 1981.
Proceedings published as
.IR "APL Quote Quad 12(1)" ,
ACM, September 1981.
.
.TP
.B Exactness of results
These procedures may (but are not required to) return inexact results
even when given exact arguments.
.
.TP
.B Realness of results
When it is possible, these procedures produce a real result from a
real argument.
.
.TP
.B Flonum variants
The flonum variants of these procedures restrict their arguments and
results to flonums. In the event that they do not yield a real result
for the given arguments, the result may be a NaN, or may be some
unspecified flonum.
.IP
Implementations that use IEEE binary floating-point arithmetic
should follow the relevant standards for these procedures.
.
\" .SH "IMPLEMENTATION NOTES"
\" .
.SH "RETURN VALUES"
.
These procedures return a single value; a number.
.
.SH EXAMPLES
.
.EX
;; The floating point numbers shown below are approximate.
;; R7RS implementations are not required to support complex
;; numbers.

(exp +inf.0)      => +inf.0
(exp -inf.0)      => 0.0
(log +inf.0)      => +inf.0
(log 0.0)         => -inf.0
(log 0)           => &assertion exception
(log -inf.0)      => +inf.0+3.141592653589793i

(atan -inf.0)     => -1.5707963267948965
(atan +inf.0)     => 1.5707963267948965
(log -1.0+0.0i)   => 0.0+3.141592653589793i
(log -1.0-0.0i)   => 0.0-3.141592653589793i
          ; if -0.0 is distinguished

(flexp +inf.0)   => +inf.0
(flexp -inf.0)   => 0.0
(fllog +inf.0)   => +inf.0
(fllog 0.0)      => -inf.0
(fllog -0.0)     => unspecified
           ; if -0.0 is distinguished
(fllog -inf.0)   => +nan.0
(flatan -inf.0)  => -1.5707963267948965
(flatan +inf.0)  => 1.5707963267948965
.EE
.
\" .SH "APPLICATION USAGE"
\" .
\" .SH RATIONALE
\" .
.SH COMPATIBILITY
.
The flonum variants are unique to R6RS. R7RS implementations are not
required to support complex numbers.
.SH ERRORS
This procedure can raise exceptions with the following condition types:
.TP
.BR "&no-infinities, &no-nans" " (R6RS)"
The implementation does not support infinities or NaN, respectively.
The continuation of the exception handler is the continuation that
otherwise would have received the infinity or NaN value.
.TP
.BR &assertion " (R6RS)"
The wrong number of arguments was passed or an argument was outside its domain.
.TP
R7RS
The assertions described above are errors.
Implementations may signal an error, extend the procedure's
domain of definition to include such arguments,
or fail catastrophically.
.
.SH "SEE ALSO"
.
.BR sqrt (3scm),
.BR expt (3scm),
.BR make-rectangular (3scm)
.SH STANDARDS
R4RS,
IEEE Scheme,
R5RS,
R6RS,
R7RS
.
.SH HISTORY
.
These procedures first appeared in R2RS, where they came from Common
Lisp. The flonum variants are unique to R6RS. The second argument of
the
.B log
procedure was introduced in R6RS. In a strange coincidence, R7RS also
introduced the same second argument.
.PP
The two-argument version of atan appears to have first appeared in
FORTRAN-IV some time before 1972 under the names
.B ATAN2
and
.BR DATAN2 .
The following manual describes it as computing atan(Arg1/Arg2):
Digital Equipment Corporation,
.IR "FORTRAN IV Programmer's Reference Manual" ,
Maynard, Massachusetts, 1973.
.SH AUTHORS
This page is part of the
.I scheme-manpages
project.
It includes materials from the RnRS documents.
More information can be found at
.UR https://github.com/schemedoc/manpages/
.UE .
.
.SH BUGS
.
Implementations should take care to check for minus zero
using code like \f[CR](eqv? x -0.0)\fP. Using only
.BR flnegative? (3scm)
does not work.
