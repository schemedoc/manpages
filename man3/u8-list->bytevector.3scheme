.\" -*- mode: nroff; coding: utf-8 -*-
.\" Copyright © 2021 Göran Weinholt
.\" SPDX-License-Identifier: MIT
.TH u8-list->bytevector 3scheme 2021-03-06 "" "Scheme Programmer's Manual"
.SH NAME
u8-list->bytevector, sint-list->bytevector, uint-list->bytevector \- convert a list of integers to a bytevector
.
.SH LIBRARY
.nf
.BR "(import (rnrs))" "                     ;R6RS"
.BR "(import (rnrs bytevectors))" "         ;R6RS"
.
.SH SYNOPSIS
.nf
.BI "(u8-list->bytevector " list )
.BI "(sint-list->bytevector " list " " endianness " " size )
.BI "(uint-list->bytevector " list " " endianness " " size )
.
.SH DESCRIPTION
These procedures convert a list of exact integers to a bytevector
according to
.I size
and
.IR endianness .
The integers are encoded in the same order as they appear in
.IR list .
.PP
The
.B sint-list->bytevector
procedure uses the two's complement representation and
.B uint-list->bytevector
is for unsigned integers.
The
.B u8-list->bytevector
procedure is the same as
.B bytevector->uint-list
with a size of 1.
.
\" .SH "IMPLEMENTATION NOTES"
\" .
.SH "RETURN VALUES"
.
Returns a newly allocated bytevector.
.SH EXAMPLES
.
.EX
(u8-list->bytevector '(1 2 3))
          => #vu8(1 2 3)

(uint-list->bytevector '(#xAA55 #x55AA #x4200) (endianness big) 2)
          => #vu8(#xAA #x55 #x55 #xAA #x42 #x0)

(sint-list->bytevector '(-2 -1 0 1 2) (endianness little) 1)
          => #vu8(254 255 0 1 2)

(let ((b (u8-list->bytevector '(1 2 3 255 1 2 1 2))))
  (bytevector->sint-list b (endianness little) 2))
          => (513 -253 513 513)

(let ((b (u8-list->bytevector '(1 2 3 255 1 2 1 2))))
  (bytevector->uint-list b (endianness little) 2))
          => (513 65283 513 513)
.EE
.
\" .SH "APPLICATION USAGE"
\" .
\" .SH RATIONALE
\" .
.SH COMPATIBILITY
.
The
.B u8-list->bytevector
procedure is absent from R7RS-small. You can use the
.BR bytevector (3scheme)
procedure instead, but it uses a variable argument list, which is
usually less efficient. The other procedures have no equivalent
in R7RS-small.
.PP
If the returned bytevector would be empty then the returned bytevector
does not have to be newly allocated.
.SH ERRORS
This procedure can raise exceptions with the following condition types:
.TP
.BR &assertion " (R6RS)"
The wrong number of arguments was passed or an argument was outside its domain.
.
.SH "SEE ALSO"
.
.BR make-bytevector (3scheme),
.BR bytevector->u8-list (3scheme),
.BR bytevector (3scheme),
.BR endianness (7scheme)
.SH STANDARDS
R6RS
.
.SH HISTORY
.
These procedures are new for R6RS, where they were based on SRFI-74.
.SH AUTHORS
This page is part of the
.I scheme-manpages
project.
It includes materials from the RnRS documents.
More information can be found at
.UR https://github.com/schemedoc/manpages/
.UE .
\" .
\" .SH BUGS
\" .
