.\" -*- mode: nroff; coding: utf-8 -*-
.\" Copyright (c) 2020 Gwen Weinholt
.\" SPDX-License-Identifier: MIT
.TH begin 7scm 2020-05-10 "" "Scheme Programmer's Manual"
.SH NAME
begin \- wrapper for multiple expressions
.
.SH LIBRARY
.nf
.BR "(import (rnrs))" "                     ;R6RS"
.BR "(import (rnrs base))" "                ;R6RS"
.BR "(import (scheme r5rs))" "              ;R7RS"
.BR "(import (scheme base))" "              ;R7RS"
.
.SH SYNOPSIS
.nf
.BI "(begin " "expression or definition" " ...)"
.BI "(begin " expression " " expression " ...)"
.
.SH DESCRIPTION
The
.B begin
keyword has different roles, depending on its context:
.PP
It may appear as a form in a
.IR body ,
.IR "library body" ,
or
.IR "top-level body" ,
or directly nested in a begin form that appears in a body.
.
In this case, the begin form must have the shape specified in the
first synopsis line.
.
This use of begin acts as a splicing form\[em]the forms inside the body
are spliced into the surrounding body, as if the begin wrapper were
not actually present.
.
A begin form in a
.I body
or
.I library body
must be non-empty if it appears after the first
.I expression
within the body.
.PP
It may appear as an ordinary expression and must have the shape
specified in the second synopsis line. In this case, the
.IR expression s
are evaluated sequentially from left to right, and the values of the
last
.I expression
are returned. This expression type is used to sequence side effects
such as assignments or input and output.
.PP
In R7RS a third form of
.B begin
appears in
.BR define-library ,
where it is used to begin the body of the library.
.\" .SH "IMPLEMENTATION NOTES"
.\"
.SH "RETURN VALUES"
.
The values of the last expression are returned.
.PP
For the splicing form the rules of wherever the splice appears instead
apply.
.SH EXAMPLES
.
.EX
;; This example is poor style but demonstrates the ordering
;; provided by "begin".
(define x 0)
(begin (set! x 5)
       (+ x 1))      => 6
;; If "begin" did not guarantee the evaluation order then the
;; above might have evaluated to 1.

(begin (display "4 plus 1 equals ")
       (display (+ 4 1)))
     ; prints 4 plus 1 equals 5
.EE
.
.SH "APPLICATION USAGE"
.
The splicing form of
.B begin
does not usually appear in code written by programmers.
.PP
The sequencing form is sometimes used in conditional expressions,
which is a matter of personal style. Others prefer to use
.BR cond ,
.BR when ,
or
.BR unless ,
which make
.B begin
unnecessary.
.PP
In R7RS
.B define-library
the
.B begin
form is often not used in favor of using
.B include
instead.
.SH RATIONALE
.
.TP
R7RS
This form is commonly used in the output of macros which need to
generate multiple definitions and splice them into the context in
which they are expanded.
.SH COMPATIBILITY
.
The splicing form of
.B begin
does not appear in R4RS and IEEE Scheme. The sequencing form enjoys
wide compatibility among Lisp dialects, but outside of Scheme it can
be named something else (\fIprogn\fP in Common Lisp and \fIdo\fP in
Clojure).
.PP
R7RS clarifies that the splicing form may appear in the REPL.
.SH ERRORS
This form can raise exceptions with the following condition types:
.TP
.BR &syntax " (R6RS)"
Raised if the splicing form is used outside of a body or as a
consequence when splicing results in an invalid body. Also raised if
the keyword is misused.
.TP
R7RS
The assertions described above are errors.
Implementations may signal an error, extend the procedure's
domain of definition to include such arguments,
or fail catastrophically.
.
.SH "SEE ALSO"
.
.BR cond (3scm),
.BR unless (3scm),
.BR when (3scm)
.SH STANDARDS
R4RS,
IEEE Scheme,
R5RS,
R6RS,
R7RS
.
.\" .SH HISTORY
.
.SH AUTHORS
This page is part of the
.I scheme-manpages
project.
It includes materials from the RnRS documents.
More information can be found at
.UR https://github.com/schemedoc/manpages/
.UE .
