#!/usr/bin/env scheme-script
;; -*- mode: scheme; coding: utf-8 -*-
;; Copyright © 2020 Göran Weinholt
;; SPDX-License-Identifier: MIT

(import
  (scheme base)
  (scheme file)
  (scheme write)
  (manpages sroff))

(define date "2020-04-18")

(define (append-map f x) (apply append (map f x)))

(define (->string x)
  (if (string? x)
      x
      (let ((p (open-output-string)))
        (display x p)
        (get-output-string p))))

(define (bold x) (string-append "\\fB" (->string x) "\\fP"))
(define (italics x) (string-append "\\fI" (->string x) "\\fP"))
(define (roman x) (string-append "\\fR" (->string x) "\\fP"))

(define (template name signatures libraries)
  `((#f "-*- mode: nroff; coding: utf-8 -*-")
    (#f "Copyright © 2020")
    (#f "SPDX-License-Identifier: MIT")
    (TH ,name "3scheme" ,date "" "Scheme Programmer's Manual")
    (SH "NAME")
    ,(string-append (symbol->string name) " \\-")
    ()
    (SH "LIBRARY")
    (nf)
    ,@(map (lambda (lib)
             (let ((libstr (->string `(import ,lib))))
               `(BR ,libstr
                    ,(string-append
                      (make-string (- 36 (string-length libstr)) #\space)
                      (case (car lib)
                        ((rnrs)   ";R6RS")
                        ((scheme) ";R7RS"))))))
           libraries)
    ()
    (SH "SYNOPSIS")
    (nf)
    ,@(map
       (lambda (sig)
         `(BI ,(string-append "(" (->string name)
                              (if (null? sig) ")" " "))
              ,@(if (null? sig)
                    '()
                    (let lp ((sig sig) (ret '()))
                      (cond ((null? sig) (reverse `(")" ,@(cdr ret))))
                            ((and (eq? (car sig) '...) (null? (cdr sig)))
                             (reverse `(" ...)" ,@(cdr ret))))
                            ((eq? (car sig) '...)
                             (lp (cdr sig) `(" ... " ,@(cdr ret))))
                            (else
                             (lp (cdr sig) `(" " ,(->string (car sig)) ,@ret))))))
              ))
       signatures)
    ()
    (SH "DESCRIPTION")
    "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla
ligula mi, elementum at rutrum in, vestibulum vitae orci posuere."
    ()
    (SH "IMPLEMENTATION NOTES")
    ()
    (SH "RETURN VALUES")
    ()
    (SH "EXAMPLES")
    ()
    (EX)
    (EE)
    ()
    (SH "APPLICATION USAGE")
    ()
    (SH "RATIONALE")
    ()
    (SH "COMPATIBILITY")
    ()
    (SH "ERRORS")
    "This procedure can raise exceptions with the following condition types:"
    (TP) (BR "&assertion" " (R6RS)")
    "The wrong number of arguments was passed or an argument was outside its domain."
    (TP) "R7RS"
    "The assertions described above are errors.
Implementations may signal an error, extend the procedure's
domain of definition to include such arguments,
or fail catastrophically."
    ()
    (SH "SEE ALSO")
    ()
    (SH "STANDARDS")
    "R4RS,"
    "IEEE Scheme,"
    "R5RS,"
    "R6RS,"
    "R7RS"
    ()
    (SH "HISTORY")
    ()
    (SH "AUTHORS")
    "This page is part of the" (I "scheme-manpages") "project."
    "It includes materials from the RnRS documents."
    "More information can be found at"
    (UR "https://github.com/schemedoc/manpages/") (UE ".")
    ()
    (SH "BUGS")
    ()))


(define (write-template name signatures libraries)
  (let* ((basename (->string name))
         (fn (string-append "templates/" basename ".3scheme"))
         (real-fn (string-append "man3/" basename ".3scheme")))
    (display fn)
    (newline)
    (cond
      ((memv #\/ (string->list basename))
       (display "Impossible filename\n"))
      ((file-exists? real-fn))
      (else
       (when (file-exists? fn)
         (delete-file fn))
       (call-with-port (open-output-file fn)
         (lambda (p)
           (fmt-roff p (template name signatures libraries))))))))

(begin
  (write-template '* '((number ...)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template '+ '((number ...)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template '- '((number ...)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template '/ '((number ...)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template '< '((number number number ...)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template '<= '((number number number ...)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template '= '((number number number ...)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template '> '((number number number ...)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template '>= '((number number number ...)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'abs '((number)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'acos '((number)) '((rnrs) (rnrs base) (scheme r5rs) (scheme inexact)))
  (write-template 'and '((test ...)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'angle '((number)) '((rnrs) (rnrs base) (scheme r5rs) (scheme complex)))
  (write-template 'append '(() (pair ... obj)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'apply '((procedure pair) (procedure obj pair) (procedure obj obj pair ...)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'asin '((number)) '((rnrs) (rnrs base) (scheme r5rs) (scheme inexact)))
  (write-template 'assert '((expression)) '((rnrs) (rnrs base)))
  (write-template 'assertion-violation '((?)) '((rnrs) (rnrs base)))
  (write-template 'assertion-violation? '((obj)) '((rnrs) (rnrs conditions)))
  (write-template 'assoc '((obj alist)) '((rnrs) (rnrs lists) (scheme r5rs) (scheme base)))
  (write-template 'assp '((proc alist)) '((rnrs) (rnrs lists)))
  (write-template 'assq '((obj alist)) '((rnrs) (rnrs lists) (scheme r5rs) (scheme base)))
  (write-template 'assv '((obj alist)) '((rnrs) (rnrs lists) (scheme r5rs) (scheme base)))
  (write-template 'atan '((number) (number number)) '((rnrs) (rnrs base) (scheme r5rs) (scheme inexact)))
  (write-template 'begin '((form ...) (expression expression ...)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'binary-port? '((port)) '((rnrs) (rnrs io ports) (scheme base)))
  (write-template 'bitwise-and '((number ...)) '((rnrs) (rnrs arithmetic bitwise)))
  (write-template 'bitwise-arithmetic-shift '((number number)) '((rnrs) (rnrs arithmetic bitwise)))
  (write-template 'bitwise-arithmetic-shift-left '((number number)) '((rnrs) (rnrs arithmetic bitwise)))
  (write-template 'bitwise-arithmetic-shift-right '((number number)) '((rnrs) (rnrs arithmetic bitwise)))
  (write-template 'bitwise-bit-count '((number)) '((rnrs) (rnrs arithmetic bitwise)))
  (write-template 'bitwise-bit-field '((number number number)) '((rnrs) (rnrs arithmetic bitwise)))
  (write-template 'bitwise-bit-set? '((number number)) '((rnrs) (rnrs arithmetic bitwise)))
  (write-template 'bitwise-copy-bit '((number number number)) '((rnrs) (rnrs arithmetic bitwise)))
  (write-template 'bitwise-copy-bit-field '((number number number number)) '((rnrs) (rnrs arithmetic bitwise)))
  (write-template 'bitwise-first-bit-set '((number)) '((rnrs) (rnrs arithmetic bitwise)))
  (write-template 'bitwise-if '((number number number)) '((rnrs) (rnrs arithmetic bitwise)))
  (write-template 'bitwise-ior '((number ...)) '((rnrs) (rnrs arithmetic bitwise)))
  (write-template 'bitwise-length '((number)) '((rnrs) (rnrs arithmetic bitwise)))
  (write-template 'bitwise-not '((number)) '((rnrs) (rnrs arithmetic bitwise)))
  (write-template 'bitwise-reverse-bit-field '((number number number)) '((rnrs) (rnrs arithmetic bitwise)))
  (write-template 'bitwise-rotate-bit-field '((number number number number)) '((rnrs) (rnrs arithmetic bitwise)))
  (write-template 'bitwise-xor '((number ...)) '((rnrs) (rnrs arithmetic bitwise)))
  (write-template 'boolean=? '((boolean boolean boolean ...)) '((rnrs) (rnrs base) (scheme base)))
  (write-template 'boolean? '((obj)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'bound-identifier=? '((?)) '((rnrs) (rnrs syntax-case)))
  (write-template 'buffer-mode '((buffer-mode)) '((rnrs) (rnrs io ports)))
  (write-template 'buffer-mode? '((obj)) '((rnrs) (rnrs io ports)))
  (write-template 'bytevector '((?)) '((scheme base)))
  (write-template 'bytevector->sint-list '((bytevector endianness number)) '((rnrs) (rnrs bytevectors)))
  (write-template 'bytevector->string '((?)) '((rnrs) (rnrs io ports)))
  (write-template 'bytevector->u8-list '((bytevector)) '((rnrs) (rnrs bytevectors)))
  (write-template 'bytevector->uint-list '((bytevector endianness number)) '((rnrs) (rnrs bytevectors)))
  (write-template 'bytevector-append '((?)) '((scheme base)))
  (write-template 'bytevector-copy '((bytevector)) '((rnrs) (rnrs bytevectors) (scheme base)))
  (write-template 'bytevector-copy! '((bytevector number bytevector number number)) '((rnrs) (rnrs bytevectors) (scheme base)))
  (write-template 'bytevector-fill! '((bytevector number)) '((rnrs) (rnrs bytevectors)))
  (write-template 'bytevector-ieee-double-native-ref '((bytevector number)) '((rnrs) (rnrs bytevectors)))
  (write-template 'bytevector-ieee-double-native-set! '((bytevector number number)) '((rnrs) (rnrs bytevectors)))
  (write-template 'bytevector-ieee-double-ref '((bytevector number endianness)) '((rnrs) (rnrs bytevectors)))
  (write-template 'bytevector-ieee-double-set! '((bytevector number number endianness)) '((rnrs) (rnrs bytevectors)))
  (write-template 'bytevector-ieee-single-native-ref '((bytevector number)) '((rnrs) (rnrs bytevectors)))
  (write-template 'bytevector-ieee-single-native-set! '((bytevector number number)) '((rnrs) (rnrs bytevectors)))
  (write-template 'bytevector-ieee-single-ref '((bytevector number endianness)) '((rnrs) (rnrs bytevectors)))
  (write-template 'bytevector-ieee-single-set! '((bytevector number number endianness)) '((rnrs) (rnrs bytevectors)))
  (write-template 'bytevector-length '((bytevector)) '((rnrs) (rnrs bytevectors) (scheme base)))
  (write-template 'bytevector-s16-native-ref '((bytevector number)) '((rnrs) (rnrs bytevectors)))
  (write-template 'bytevector-s16-native-set! '((bytevector number number)) '((rnrs) (rnrs bytevectors)))
  (write-template 'bytevector-s16-ref '((bytevector number endianness)) '((rnrs) (rnrs bytevectors)))
  (write-template 'bytevector-s16-set! '((bytevector number number endianness)) '((rnrs) (rnrs bytevectors)))
  (write-template 'bytevector-s32-native-ref '((bytevector number)) '((rnrs) (rnrs bytevectors)))
  (write-template 'bytevector-s32-native-set! '((bytevector number number)) '((rnrs) (rnrs bytevectors)))
  (write-template 'bytevector-s32-ref '((bytevector number endianness)) '((rnrs) (rnrs bytevectors)))
  (write-template 'bytevector-s32-set! '((bytevector number number endianness)) '((rnrs) (rnrs bytevectors)))
  (write-template 'bytevector-s64-native-ref '((bytevector number)) '((rnrs) (rnrs bytevectors)))
  (write-template 'bytevector-s64-native-set! '((bytevector number number)) '((rnrs) (rnrs bytevectors)))
  (write-template 'bytevector-s64-ref '((bytevector number endianness)) '((rnrs) (rnrs bytevectors)))
  (write-template 'bytevector-s64-set! '((bytevector number number endianness)) '((rnrs) (rnrs bytevectors)))
  (write-template 'bytevector-s8-ref '((bytevector number)) '((rnrs) (rnrs bytevectors)))
  (write-template 'bytevector-s8-set! '((bytevector number number)) '((rnrs) (rnrs bytevectors)))
  (write-template 'bytevector-sint-ref '((bytevector number endianness number)) '((rnrs) (rnrs bytevectors)))
  (write-template 'bytevector-sint-set! '((bytevector number number endianness number)) '((rnrs) (rnrs bytevectors)))
  (write-template 'bytevector-u16-native-ref '((bytevector number)) '((rnrs) (rnrs bytevectors)))
  (write-template 'bytevector-u16-native-set! '((bytevector number number)) '((rnrs) (rnrs bytevectors)))
  (write-template 'bytevector-u16-ref '((bytevector number endianness)) '((rnrs) (rnrs bytevectors)))
  (write-template 'bytevector-u16-set! '((bytevector number number endianness)) '((rnrs) (rnrs bytevectors)))
  (write-template 'bytevector-u32-native-ref '((bytevector number)) '((rnrs) (rnrs bytevectors)))
  (write-template 'bytevector-u32-native-set! '((bytevector number number)) '((rnrs) (rnrs bytevectors)))
  (write-template 'bytevector-u32-ref '((bytevector number endianness)) '((rnrs) (rnrs bytevectors)))
  (write-template 'bytevector-u32-set! '((bytevector number number endianness)) '((rnrs) (rnrs bytevectors)))
  (write-template 'bytevector-u64-native-ref '((bytevector number)) '((rnrs) (rnrs bytevectors)))
  (write-template 'bytevector-u64-native-set! '((bytevector number number)) '((rnrs) (rnrs bytevectors)))
  (write-template 'bytevector-u64-ref '((bytevector number endianness)) '((rnrs) (rnrs bytevectors)))
  (write-template 'bytevector-u64-set! '((bytevector number number endianness)) '((rnrs) (rnrs bytevectors)))
  (write-template 'bytevector-u8-ref '((bytevector number)) '((rnrs) (rnrs bytevectors) (scheme base)))
  (write-template 'bytevector-u8-set! '((bytevector number number)) '((rnrs) (rnrs bytevectors) (scheme base)))
  (write-template 'bytevector-uint-ref '((bytevector number endianness number)) '((rnrs) (rnrs bytevectors)))
  (write-template 'bytevector-uint-set! '((bytevector number number endianness number)) '((rnrs) (rnrs bytevectors)))
  (write-template 'bytevector=? '((bytevector bytevector)) '((rnrs) (rnrs bytevectors)))
  (write-template 'bytevector? '((obj)) '((rnrs) (rnrs bytevectors) (scheme base)))
  (write-template 'caaaar '((pair)) '((rnrs) (rnrs base) (scheme r5rs) (scheme cxr)))
  (write-template 'caaadr '((pair)) '((rnrs) (rnrs base) (scheme r5rs) (scheme cxr)))
  (write-template 'caaar '((pair)) '((rnrs) (rnrs base) (scheme r5rs) (scheme cxr)))
  (write-template 'caadar '((pair)) '((rnrs) (rnrs base) (scheme r5rs) (scheme cxr)))
  (write-template 'caaddr '((pair)) '((rnrs) (rnrs base) (scheme r5rs) (scheme cxr)))
  (write-template 'caadr '((pair)) '((rnrs) (rnrs base) (scheme r5rs) (scheme cxr)))
  (write-template 'caar '((pair)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'cadaar '((pair)) '((rnrs) (rnrs base) (scheme r5rs) (scheme cxr)))
  (write-template 'cadadr '((pair)) '((rnrs) (rnrs base) (scheme r5rs) (scheme cxr)))
  (write-template 'cadar '((pair)) '((rnrs) (rnrs base) (scheme r5rs) (scheme cxr)))
  (write-template 'caddar '((pair)) '((rnrs) (rnrs base) (scheme r5rs) (scheme cxr)))
  (write-template 'cadddr '((pair)) '((rnrs) (rnrs base) (scheme r5rs) (scheme cxr)))
  (write-template 'caddr '((pair)) '((rnrs) (rnrs base) (scheme r5rs) (scheme cxr)))
  (write-template 'cadr '((pair)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'call-with-bytevector-output-port '((procedure) (procedure boolean)) '((rnrs) (rnrs io ports)))
  (write-template 'call-with-current-continuation '((procedure)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'call-with-input-file '((filename proc)) '((rnrs) (rnrs io simple) (scheme r5rs) (scheme file)))
  (write-template 'call-with-output-file '((filename proc)) '((rnrs) (rnrs io simple) (scheme r5rs) (scheme file)))
  (write-template 'call-with-port '((port procedure)) '((rnrs) (rnrs io ports) (scheme base)))
  (write-template 'call-with-string-output-port '((procedure)) '((rnrs) (rnrs io ports)))
  (write-template 'call-with-values '((procedure procedure)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'call/cc '((procedure)) '((rnrs) (rnrs base) (scheme base)))
  (write-template 'car '((pair)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'case '((key case case ...)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'case-lambda '((?)) '((rnrs) (rnrs control) (scheme case-lambda)))
  (write-template 'cdaaar '((pair)) '((rnrs) (rnrs base) (scheme r5rs) (scheme cxr)))
  (write-template 'cdaadr '((pair)) '((rnrs) (rnrs base) (scheme r5rs) (scheme cxr)))
  (write-template 'cdaar '((pair)) '((rnrs) (rnrs base) (scheme r5rs) (scheme cxr)))
  (write-template 'cdadar '((pair)) '((rnrs) (rnrs base) (scheme r5rs) (scheme cxr)))
  (write-template 'cdaddr '((pair)) '((rnrs) (rnrs base) (scheme r5rs) (scheme cxr)))
  (write-template 'cdadr '((pair)) '((rnrs) (rnrs base) (scheme r5rs) (scheme cxr)))
  (write-template 'cdar '((pair)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'cddaar '((pair)) '((rnrs) (rnrs base) (scheme r5rs) (scheme cxr)))
  (write-template 'cddadr '((pair)) '((rnrs) (rnrs base) (scheme r5rs) (scheme cxr)))
  (write-template 'cddar '((pair)) '((rnrs) (rnrs base) (scheme r5rs) (scheme cxr)))
  (write-template 'cdddar '((pair)) '((rnrs) (rnrs base) (scheme r5rs) (scheme cxr)))
  (write-template 'cddddr '((pair)) '((rnrs) (rnrs base) (scheme r5rs) (scheme cxr)))
  (write-template 'cdddr '((pair)) '((rnrs) (rnrs base) (scheme r5rs) (scheme cxr)))
  (write-template 'cddr '((pair)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'cdr '((pair)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'ceiling '((number)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'char->integer '((char)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'char-alphabetic? '((char)) '((rnrs) (rnrs unicode) (scheme r5rs) (scheme char)))
  (write-template 'char-ci<=? '((char char char ...)) '((rnrs) (rnrs unicode) (scheme r5rs) (scheme char)))
  (write-template 'char-ci<? '((char char char ...)) '((rnrs) (rnrs unicode) (scheme r5rs) (scheme char)))
  (write-template 'char-ci=? '((char char char ...)) '((rnrs) (rnrs unicode) (scheme r5rs) (scheme char)))
  (write-template 'char-ci>=? '((char char char ...)) '((rnrs) (rnrs unicode) (scheme r5rs) (scheme char)))
  (write-template 'char-ci>? '((char char char ...)) '((rnrs) (rnrs unicode) (scheme r5rs) (scheme char)))
  (write-template 'char-downcase '((char)) '((rnrs) (rnrs unicode) (scheme r5rs) (scheme char)))
  (write-template 'char-foldcase '((char)) '((rnrs) (rnrs unicode) (scheme char)))
  (write-template 'char-general-category '((char)) '((rnrs) (rnrs unicode)))
  (write-template 'char-lower-case? '((char)) '((rnrs) (rnrs unicode) (scheme r5rs) (scheme char)))
  (write-template 'char-numeric? '((char)) '((rnrs) (rnrs unicode) (scheme r5rs) (scheme char)))
  (write-template 'char-ready? '((?)) '((scheme r5rs) (scheme base)))
  (write-template 'char-title-case? '((char)) '((rnrs) (rnrs unicode)))
  (write-template 'char-titlecase '((char)) '((rnrs) (rnrs unicode)))
  (write-template 'char-upcase '((char)) '((rnrs) (rnrs unicode) (scheme r5rs) (scheme char)))
  (write-template 'char-upper-case? '((char)) '((rnrs) (rnrs unicode) (scheme r5rs) (scheme char)))
  (write-template 'char-whitespace? '((char)) '((rnrs) (rnrs unicode) (scheme r5rs) (scheme char)))
  (write-template 'char<=? '((char char char ...)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'char<? '((char char char ...)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'char=? '((char char char ...)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'char>=? '((char char char ...)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'char>? '((char char char ...)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'char? '((obj)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'close-input-port '((input-port)) '((rnrs) (rnrs io simple) (scheme r5rs) (scheme base)))
  (write-template 'close-output-port '((output-port)) '((rnrs) (rnrs io simple) (scheme r5rs) (scheme base)))
  (write-template 'close-port '((?)) '((rnrs) (rnrs io ports) (scheme base)))
  (write-template 'command-line '(()) '((rnrs) (rnrs programs) (scheme process-context)))
  (write-template 'complex? '((obj)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'cond '((cond cond ...)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'cond-expand '((?)) '((scheme base)))
  (write-template 'condition '((condition ...)) '((rnrs) (rnrs conditions)))
  (write-template 'condition-accessor '((?)) '((rnrs) (rnrs conditions)))
  (write-template 'condition-irritants '((?)) '((rnrs) (rnrs conditions)))
  (write-template 'condition-message '((?)) '((rnrs) (rnrs conditions)))
  (write-template 'condition-predicate '((?)) '((rnrs) (rnrs conditions)))
  (write-template 'condition-who '((?)) '((rnrs) (rnrs conditions)))
  (write-template 'condition? '((obj)) '((rnrs) (rnrs conditions)))
  (write-template 'cons '((obj obj)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'cons* '((obj ... obj obj) (obj)) '((rnrs) (rnrs lists)))
  (write-template 'cos '((number)) '((rnrs) (rnrs base) (scheme r5rs) (scheme inexact)))
  (write-template 'current-error-port '(()) '((rnrs) (rnrs io ports) (rnrs io simple) (scheme base)))
  (write-template 'current-input-port '(()) '((rnrs) (rnrs io ports) (rnrs io simple) (scheme r5rs) (scheme base)))
  (write-template 'current-jiffy '(()) '((scheme time)))
  (write-template 'current-output-port '(()) '((rnrs) (rnrs io ports) (rnrs io simple) (scheme r5rs) (scheme base)))
  (write-template 'current-second '(()) '((scheme time)))
  (write-template 'datum->syntax '((template-id datum)) '((rnrs) (rnrs syntax-case)))
  (write-template 'define '((variable expression) (variable)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'define-condition-type '((?)) '((rnrs) (rnrs conditions)))
  (write-template 'define-enumeration '((?)) '((rnrs) (rnrs enums)))
  (write-template 'define-record-type '((name record)) '((rnrs) (rnrs records syntactic) (scheme base)))
  (write-template 'define-syntax '((keyword expression)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'define-values '((?)) '((scheme base)))
  (write-template 'delay '((expression)) '((rnrs r5rs) (scheme r5rs) (scheme lazy)))
  (write-template 'delay-force '((?)) '((scheme lazy)))
  (write-template 'delete-file '((filename)) '((rnrs) (rnrs files) (scheme file)))
  (write-template 'denominator '((number)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'digit-value '((char)) '((scheme char)))
  (write-template 'display '((obj) (obj textual-output-port)) '((rnrs) (rnrs io simple) (scheme write) (scheme r5rs)))
  (write-template 'div '((number number)) '((rnrs) (rnrs base)))
  (write-template 'div-and-mod '((number number)) '((rnrs) (rnrs base)))
  (write-template 'div0 '((number number)) '((rnrs) (rnrs base)))
  (write-template 'div0-and-mod0 '((number number)) '((rnrs) (rnrs base)))
  (write-template 'do '((?)) '((rnrs) (rnrs control) (scheme r5rs) (scheme base)))
  (write-template 'dynamic-wind '((procedure procedure procedure)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'emergency-exit '((?)) '((scheme process-context)))
  (write-template 'endianness '((endianness-symbol)) '((rnrs) (rnrs bytevectors)))
  (write-template 'enum-set->list '((enum-set)) '((rnrs) (rnrs enums)))
  (write-template 'enum-set-complement '((enum-set)) '((rnrs) (rnrs enums)))
  (write-template 'enum-set-constructor '((enum-set)) '((rnrs) (rnrs enums)))
  (write-template 'enum-set-difference '((enum-set enum-set)) '((rnrs) (rnrs enums)))
  (write-template 'enum-set-indexer '((enum-set)) '((rnrs) (rnrs enums)))
  (write-template 'enum-set-intersection '((enum-set enum-set)) '((rnrs) (rnrs enums)))
  (write-template 'enum-set-member? '((symbol enum-set)) '((rnrs) (rnrs enums)))
  (write-template 'enum-set-projection '((enum-set enum-set)) '((rnrs) (rnrs enums)))
  (write-template 'enum-set-subset? '((enum-set enum-set)) '((rnrs) (rnrs enums)))
  (write-template 'enum-set-union '((enum-set enum-set)) '((rnrs) (rnrs enums)))
  (write-template 'enum-set-universe '((enum-set)) '((rnrs) (rnrs enums)))
  (write-template 'enum-set=? '((enum-set enum-set)) '((rnrs) (rnrs enums)))
  (write-template 'environment '((import-spec ...)) '((rnrs eval) (scheme eval)))
  (write-template 'eof-object '(()) '((rnrs) (rnrs io ports) (rnrs io simple) (scheme base)))
  (write-template 'eof-object? '((obj)) '((rnrs) (rnrs io ports) (rnrs io simple) (scheme r5rs) (scheme base)))
  (write-template 'eol-style '((eol-style)) '((rnrs) (rnrs io ports)))
  (write-template 'eq? '((obj obj)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'equal-hash '((obj)) '((rnrs) (rnrs hashtables)))
  (write-template 'equal? '((obj obj)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'eqv? '((obj obj)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'error '((?)) '((rnrs) (rnrs base) (scheme base)))
  (write-template 'error-handling-mode '((?)) '((rnrs) (rnrs io ports)))
  (write-template 'error-object-irritants '((?)) '((scheme base)))
  (write-template 'error-object-message '((?)) '((scheme base)))
  (write-template 'error-object? '((?)) '((scheme base)))
  (write-template 'error? '((obj)) '((rnrs) (rnrs conditions)))
  (write-template 'eval '((expression environment)) '((rnrs eval) (scheme r5rs) (scheme eval)))
  (write-template 'even? '((number)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'exact '((number)) '((rnrs) (rnrs base) (scheme base)))
  (write-template 'exact->inexact '((z)) '((rnrs r5rs) (scheme r5rs)))
  (write-template 'exact-integer-sqrt '((number)) '((rnrs) (rnrs base) (scheme base)))
  (write-template 'exact-integer? '((?)) '((scheme base)))
  (write-template 'exact? '((number)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'exists '((proc list list ... list)) '((rnrs) (rnrs lists)))
  (write-template 'exit '(() (obj)) '((rnrs) (rnrs programs) (scheme process-context)))
  (write-template 'exp '((number)) '((rnrs) (rnrs base) (scheme r5rs) (scheme inexact)))
  (write-template 'expt '((number number)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'features '((?)) '((scheme base)))
  (write-template 'file-error? '((?)) '((scheme base)))
  (write-template 'file-exists? '((filename)) '((rnrs) (rnrs files) (scheme file)))
  (write-template 'file-options '((file-options ...)) '((rnrs) (rnrs io ports)))
  (write-template 'filter '((proc list)) '((rnrs) (rnrs lists)))
  (write-template 'find '((proc list)) '((rnrs) (rnrs lists)))
  (write-template 'finite? '((number)) '((rnrs) (rnrs base) (scheme inexact)))
  (write-template 'fixnum->flonum '((number)) '((rnrs) (rnrs arithmetic flonums)))
  (write-template 'fixnum-width '(()) '((rnrs) (rnrs arithmetic fixnums)))
  (write-template 'fixnum? '((obj)) '((rnrs) (rnrs arithmetic fixnums)))
  (write-template 'fl* '((number ...)) '((rnrs) (rnrs arithmetic flonums)))
  (write-template 'fl+ '((number ...)) '((rnrs) (rnrs arithmetic flonums)))
  (write-template 'fl- '((number ...)) '((rnrs) (rnrs arithmetic flonums)))
  (write-template 'fl/ '((number ...)) '((rnrs) (rnrs arithmetic flonums)))
  (write-template 'fl<=? '((number number number ...)) '((rnrs) (rnrs arithmetic flonums)))
  (write-template 'fl<? '((number number number ...)) '((rnrs) (rnrs arithmetic flonums)))
  (write-template 'fl=? '((number number number ...)) '((rnrs) (rnrs arithmetic flonums)))
  (write-template 'fl>=? '((number number number ...)) '((rnrs) (rnrs arithmetic flonums)))
  (write-template 'fl>? '((number number number ...)) '((rnrs) (rnrs arithmetic flonums)))
  (write-template 'flabs '((number)) '((rnrs) (rnrs arithmetic flonums)))
  (write-template 'flacos '((number)) '((rnrs) (rnrs arithmetic flonums)))
  (write-template 'flasin '((number)) '((rnrs) (rnrs arithmetic flonums)))
  (write-template 'flatan '((number) (number number)) '((rnrs) (rnrs arithmetic flonums)))
  (write-template 'flceiling '((number)) '((rnrs) (rnrs arithmetic flonums)))
  (write-template 'flcos '((number)) '((rnrs) (rnrs arithmetic flonums)))
  (write-template 'fldenominator '((number)) '((rnrs) (rnrs arithmetic flonums)))
  (write-template 'fldiv '((number number)) '((rnrs) (rnrs arithmetic flonums)))
  (write-template 'fldiv-and-mod '((number number)) '((rnrs) (rnrs arithmetic flonums)))
  (write-template 'fldiv0 '((number number)) '((rnrs) (rnrs arithmetic flonums)))
  (write-template 'fldiv0-and-mod0 '((number number)) '((rnrs) (rnrs arithmetic flonums)))
  (write-template 'fleven? '((number)) '((rnrs) (rnrs arithmetic flonums)))
  (write-template 'flexp '((number)) '((rnrs) (rnrs arithmetic flonums)))
  (write-template 'flexpt '((number number)) '((rnrs) (rnrs arithmetic flonums)))
  (write-template 'flfinite? '((number)) '((rnrs) (rnrs arithmetic flonums)))
  (write-template 'flfloor '((number)) '((rnrs) (rnrs arithmetic flonums)))
  (write-template 'flinfinite? '((number)) '((rnrs) (rnrs arithmetic flonums)))
  (write-template 'flinteger? '((number)) '((rnrs) (rnrs arithmetic flonums)))
  (write-template 'fllog '((number) (number number)) '((rnrs) (rnrs arithmetic flonums)))
  (write-template 'flmax '((number ...)) '((rnrs) (rnrs arithmetic flonums)))
  (write-template 'flmin '((number ...)) '((rnrs) (rnrs arithmetic flonums)))
  (write-template 'flmod '((number number)) '((rnrs) (rnrs arithmetic flonums)))
  (write-template 'flmod0 '((number number)) '((rnrs) (rnrs arithmetic flonums)))
  (write-template 'flnan? '((number)) '((rnrs) (rnrs arithmetic flonums)))
  (write-template 'flnegative? '((number)) '((rnrs) (rnrs arithmetic flonums)))
  (write-template 'flnumerator '((number)) '((rnrs) (rnrs arithmetic flonums)))
  (write-template 'flodd? '((number)) '((rnrs) (rnrs arithmetic flonums)))
  (write-template 'flonum? '((obj)) '((rnrs) (rnrs arithmetic flonums)))
  (write-template 'floor '((number)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'floor-quotient '((?)) '((scheme base)))
  (write-template 'floor-remainder '((?)) '((scheme base)))
  (write-template 'floor/ '((?)) '((scheme base)))
  (write-template 'flpositive? '((number)) '((rnrs) (rnrs arithmetic flonums)))
  (write-template 'flround '((number)) '((rnrs) (rnrs arithmetic flonums)))
  (write-template 'flsin '((number)) '((rnrs) (rnrs arithmetic flonums)))
  (write-template 'flsqrt '((number)) '((rnrs) (rnrs arithmetic flonums)))
  (write-template 'fltan '((number)) '((rnrs) (rnrs arithmetic flonums)))
  (write-template 'fltruncate '((number)) '((rnrs) (rnrs arithmetic flonums)))
  (write-template 'flush-output-port '((?)) '((rnrs) (rnrs io ports) (scheme base)))
  (write-template 'flzero? '((number)) '((rnrs) (rnrs arithmetic flonums)))
  (write-template 'fold-left '((combine nil list list ... list)) '((rnrs) (rnrs lists)))
  (write-template 'fold-right '((combine nil list list ... list)) '((rnrs) (rnrs lists)))
  (write-template 'for-all '((proc list list ... list)) '((rnrs) (rnrs lists)))
  (write-template 'for-each '((procedure pair ...)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'force '((promise)) '((rnrs r5rs) (scheme r5rs) (scheme lazy)))
  (write-template 'free-identifier=? '((?)) '((rnrs) (rnrs syntax-case)))
  (write-template 'fx* '((fx fx)) '((rnrs) (rnrs arithmetic fixnums)))
  (write-template 'fx*/carry '((number number number)) '((rnrs) (rnrs arithmetic fixnums)))
  (write-template 'fx+ '((fx fx)) '((rnrs) (rnrs arithmetic fixnums)))
  (write-template 'fx+/carry '((number number number)) '((rnrs) (rnrs arithmetic fixnums)))
  (write-template 'fx- '((fx fx) (fx)) '((rnrs) (rnrs arithmetic fixnums)))
  (write-template 'fx-/carry '((number number number)) '((rnrs) (rnrs arithmetic fixnums)))
  (write-template 'fx<=? '((fx fx fx ...)) '((rnrs) (rnrs arithmetic fixnums)))
  (write-template 'fx<? '((fx fx fx ...)) '((rnrs) (rnrs arithmetic fixnums)))
  (write-template 'fx=? '((fx fx fx ...)) '((rnrs) (rnrs arithmetic fixnums)))
  (write-template 'fx>=? '((fx fx fx ...)) '((rnrs) (rnrs arithmetic fixnums)))
  (write-template 'fx>? '((fx fx fx ...)) '((rnrs) (rnrs arithmetic fixnums)))
  (write-template 'fxand '((number ...)) '((rnrs) (rnrs arithmetic fixnums)))
  (write-template 'fxarithmetic-shift '((number number)) '((rnrs) (rnrs arithmetic fixnums)))
  (write-template 'fxarithmetic-shift-left '((number number)) '((rnrs) (rnrs arithmetic fixnums)))
  (write-template 'fxarithmetic-shift-right '((number number)) '((rnrs) (rnrs arithmetic fixnums)))
  (write-template 'fxbit-count '((number)) '((rnrs) (rnrs arithmetic fixnums)))
  (write-template 'fxbit-field '((number number number)) '((rnrs) (rnrs arithmetic fixnums)))
  (write-template 'fxbit-set? '((number number)) '((rnrs) (rnrs arithmetic fixnums)))
  (write-template 'fxcopy-bit '((number number number)) '((rnrs) (rnrs arithmetic fixnums)))
  (write-template 'fxcopy-bit-field '((number number number number)) '((rnrs) (rnrs arithmetic fixnums)))
  (write-template 'fxdiv '((fx fx)) '((rnrs) (rnrs arithmetic fixnums)))
  (write-template 'fxdiv-and-mod '((fx fx)) '((rnrs) (rnrs arithmetic fixnums)))
  (write-template 'fxdiv0 '((fx fx)) '((rnrs) (rnrs arithmetic fixnums)))
  (write-template 'fxdiv0-and-mod0 '((fx fx)) '((rnrs) (rnrs arithmetic fixnums)))
  (write-template 'fxeven? '((fx)) '((rnrs) (rnrs arithmetic fixnums)))
  (write-template 'fxfirst-bit-set '((number)) '((rnrs) (rnrs arithmetic fixnums)))
  (write-template 'fxif '((number number number)) '((rnrs) (rnrs arithmetic fixnums)))
  (write-template 'fxior '((number ...)) '((rnrs) (rnrs arithmetic fixnums)))
  (write-template 'fxlength '((number)) '((rnrs) (rnrs arithmetic fixnums)))
  (write-template 'fxmax '((fx fx ...)) '((rnrs) (rnrs arithmetic fixnums)))
  (write-template 'fxmin '((fx fx ...)) '((rnrs) (rnrs arithmetic fixnums)))
  (write-template 'fxmod '((fx fx)) '((rnrs) (rnrs arithmetic fixnums)))
  (write-template 'fxmod0 '((fx fx)) '((rnrs) (rnrs arithmetic fixnums)))
  (write-template 'fxnegative? '((fx)) '((rnrs) (rnrs arithmetic fixnums)))
  (write-template 'fxnot '((number)) '((rnrs) (rnrs arithmetic fixnums)))
  (write-template 'fxodd? '((fx)) '((rnrs) (rnrs arithmetic fixnums)))
  (write-template 'fxpositive? '((fx)) '((rnrs) (rnrs arithmetic fixnums)))
  (write-template 'fxreverse-bit-field '((number number number)) '((rnrs) (rnrs arithmetic fixnums)))
  (write-template 'fxrotate-bit-field '((number number number number)) '((rnrs) (rnrs arithmetic fixnums)))
  (write-template 'fxxor '((number ...)) '((rnrs) (rnrs arithmetic fixnums)))
  (write-template 'fxzero? '((fx)) '((rnrs) (rnrs arithmetic fixnums)))
  (write-template 'gcd '((number ...)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'generate-temporaries '((list)) '((rnrs) (rnrs syntax-case)))
  (write-template 'get-bytevector-all '((?)) '((rnrs) (rnrs io ports)))
  (write-template 'get-bytevector-n '((binary-port number)) '((rnrs) (rnrs io ports)))
  (write-template 'get-bytevector-n! '((binary-port bytevector number number)) '((rnrs) (rnrs io ports)))
  (write-template 'get-bytevector-some '((?)) '((rnrs) (rnrs io ports)))
  (write-template 'get-char '((?)) '((rnrs) (rnrs io ports)))
  (write-template 'get-datum '((?)) '((rnrs) (rnrs io ports)))
  (write-template 'get-environment-variable '((?)) '((scheme process-context)))
  (write-template 'get-environment-variables '((?)) '((scheme process-context)))
  (write-template 'get-line '((?)) '((rnrs) (rnrs io ports)))
  (write-template 'get-output-bytevector '((?)) '((scheme base)))
  (write-template 'get-output-string '((?)) '((scheme base)))
  (write-template 'get-string-all '((?)) '((rnrs) (rnrs io ports)))
  (write-template 'get-string-n '((textual-port number)) '((rnrs) (rnrs io ports)))
  (write-template 'get-string-n! '((textual-port string number number)) '((rnrs) (rnrs io ports)))
  (write-template 'get-u8 '((?)) '((rnrs) (rnrs io ports)))
  (write-template 'greatest-fixnum '(()) '((rnrs) (rnrs arithmetic fixnums)))
  (write-template 'guard '((?)) '((rnrs) (rnrs exceptions) (scheme base)))
  (write-template 'hashtable-clear! '((hashtable) (hashtable k)) '((rnrs) (rnrs hashtables)))
  (write-template 'hashtable-contains? '((hashtable key)) '((rnrs) (rnrs hashtables)))
  (write-template 'hashtable-copy '((hashtable) (hashtable mutable)) '((rnrs) (rnrs hashtables)))
  (write-template 'hashtable-delete! '((hashtable key)) '((rnrs) (rnrs hashtables)))
  (write-template 'hashtable-entries '((hashtable)) '((rnrs) (rnrs hashtables)))
  (write-template 'hashtable-equivalence-function '((hashtable)) '((rnrs) (rnrs hashtables)))
  (write-template 'hashtable-hash-function '((hashtable)) '((rnrs) (rnrs hashtables)))
  (write-template 'hashtable-keys '((hashtable)) '((rnrs) (rnrs hashtables)))
  (write-template 'hashtable-mutable? '((hashtable)) '((rnrs) (rnrs hashtables)))
  (write-template 'hashtable-ref '((hashtable key default)) '((rnrs) (rnrs hashtables)))
  (write-template 'hashtable-set! '((hashtable key obj)) '((rnrs) (rnrs hashtables)))
  (write-template 'hashtable-size '((hashtable)) '((rnrs) (rnrs hashtables)))
  (write-template 'hashtable-update! '((hashtable key proc default)) '((rnrs) (rnrs hashtables)))
  (write-template 'hashtable? '((obj)) '((rnrs) (rnrs hashtables)))
  (write-template 'i/o-decoding-error? '((obj)) '((rnrs) (rnrs io ports)))
  (write-template 'i/o-encoding-error-char '((?)) '((rnrs) (rnrs io ports)))
  (write-template 'i/o-encoding-error? '((obj)) '((rnrs) (rnrs io ports)))
  (write-template 'i/o-error-filename '((condition)) '((rnrs) (rnrs io ports) (rnrs io simple) (rnrs files)))
  (write-template 'i/o-error-port '((condition)) '((rnrs) (rnrs io ports) (rnrs io simple) (rnrs files)))
  (write-template 'i/o-error-position '((condition)) '((rnrs) (rnrs io ports) (rnrs io simple) (rnrs files)))
  (write-template 'i/o-error? '((obj)) '((rnrs) (rnrs io ports) (rnrs io simple) (rnrs files)))
  (write-template 'i/o-file-already-exists-error? '((obj)) '((rnrs) (rnrs io ports) (rnrs io simple) (rnrs files)))
  (write-template 'i/o-file-does-not-exist-error? '((obj)) '((rnrs) (rnrs io ports) (rnrs io simple) (rnrs files)))
  (write-template 'i/o-file-is-read-only-error? '((obj)) '((rnrs) (rnrs io ports) (rnrs io simple) (rnrs files)))
  (write-template 'i/o-file-protection-error? '((obj)) '((rnrs) (rnrs io ports) (rnrs io simple) (rnrs files)))
  (write-template 'i/o-filename-error? '((obj)) '((rnrs) (rnrs io ports) (rnrs io simple) (rnrs files)))
  (write-template 'i/o-invalid-position-error? '((obj)) '((rnrs) (rnrs io ports) (rnrs io simple) (rnrs files)))
  (write-template 'i/o-port-error? '((obj)) '((rnrs) (rnrs io ports) (rnrs io simple) (rnrs files)))
  (write-template 'i/o-read-error? '((obj)) '((rnrs) (rnrs io ports) (rnrs io simple) (rnrs files)))
  (write-template 'i/o-write-error? '((obj)) '((rnrs) (rnrs io ports) (rnrs io simple) (rnrs files)))
  (write-template 'identifier-syntax '((?)) '((rnrs) (rnrs base)))
  (write-template 'identifier? '((obj)) '((rnrs) (rnrs syntax-case)))
  (write-template 'if '((test consequent alternate) (test consequent)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'imag-part '((number)) '((rnrs) (rnrs base) (scheme r5rs) (scheme complex)))
  (write-template 'implementation-restriction-violation? '((obj)) '((rnrs) (rnrs conditions)))
  (write-template 'include '((?)) '((scheme base)))
  (write-template 'include-ci '((?)) '((scheme base)))
  (write-template 'inexact '((number)) '((rnrs) (rnrs base) (scheme base)))
  (write-template 'inexact->exact '((z)) '((rnrs r5rs) (scheme r5rs)))
  (write-template 'inexact? '((number)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'infinite? '((number)) '((rnrs) (rnrs base) (scheme inexact)))
  (write-template 'input-port-open? '((?)) '((scheme base)))
  (write-template 'input-port? '((obj)) '((rnrs) (rnrs io simple) (rnrs io ports) (scheme r5rs) (scheme base)))
  (write-template 'integer->char '((number)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'integer-valued? '((obj)) '((rnrs) (rnrs base)))
  (write-template 'integer? '((obj)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'interaction-environment '((?)) '((scheme repl) (scheme r5rs)))
  (write-template 'irritants-condition? '((obj)) '((rnrs) (rnrs conditions)))
  (write-template 'jiffies-per-second '(()) '((scheme time)))
  (write-template 'lambda '((formals body)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'latin-1-codec '(()) '((rnrs) (rnrs io ports)))
  (write-template 'lcm '((number ...)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'least-fixnum '(()) '((rnrs) (rnrs arithmetic fixnums)))
  (write-template 'length '((pair)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'let '((bindings body)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'let* '((bindings body)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'let*-values '((mv-bindings body)) '((rnrs) (rnrs base) (scheme base)))
  (write-template 'let-syntax '((?)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'let-values '((mv-bindings body)) '((rnrs) (rnrs base) (scheme base)))
  (write-template 'letrec '((bindings body)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'letrec* '((bindings body)) '((rnrs) (rnrs base) (scheme base)))
  (write-template 'letrec-syntax '((?)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'lexical-violation? '((obj)) '((rnrs) (rnrs conditions)))
  (write-template 'list '((obj ...)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'list->string '((list)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'list->vector '((pair)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'list-copy '((?)) '((scheme base)))
  (write-template 'list-ref '((pair number)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'list-set! '((?)) '((scheme base)))
  (write-template 'list-sort '((proc list)) '((rnrs) (rnrs sorting)))
  (write-template 'list-tail '((obj number)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'list? '((obj)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'load '((filename) (filename environment-specifier)) '((scheme r5rs) (scheme load)))
  (write-template 'log '((number) (number number)) '((rnrs) (rnrs base) (scheme r5rs) (scheme inexact)))
  (write-template 'lookahead-char '((?)) '((rnrs) (rnrs io ports)))
  (write-template 'lookahead-u8 '((?)) '((rnrs) (rnrs io ports)))
  (write-template 'magnitude '((number)) '((rnrs) (rnrs base) (scheme r5rs) (scheme complex)))
  (write-template 'make-assertion-violation '(()) '((rnrs) (rnrs conditions)))
  (write-template 'make-bytevector '((number) (number number)) '((rnrs) (rnrs bytevectors) (scheme base)))
  (write-template 'make-custom-binary-input-port '((id read! get-position set-position! close)) '((rnrs) (rnrs io ports)))
  (write-template 'make-custom-binary-input/output-port '((id read! write! get-position set-position! close)) '((rnrs) (rnrs io ports)))
  (write-template 'make-custom-binary-output-port '((id write! get-position set-position! close)) '((rnrs) (rnrs io ports)))
  (write-template 'make-custom-textual-input-port '((id read! get-position set-position! close)) '((rnrs) (rnrs io ports)))
  (write-template 'make-custom-textual-input/output-port '((id read! write! get-position set-position! close)) '((rnrs) (rnrs io ports)))
  (write-template 'make-custom-textual-output-port '((id write! get-position set-position! close)) '((rnrs) (rnrs io ports)))
  (write-template 'make-enumeration '((symbol-list)) '((rnrs) (rnrs enums)))
  (write-template 'make-eq-hashtable '(() (k)) '((rnrs) (rnrs hashtables)))
  (write-template 'make-eqv-hashtable '(() (k)) '((rnrs) (rnrs hashtables)))
  (write-template 'make-error '(()) '((rnrs) (rnrs conditions)))
  (write-template 'make-hashtable '((hash-function equiv) (hash-function equiv k)) '((rnrs) (rnrs hashtables)))
  (write-template 'make-i/o-decoding-error '((obj)) '((rnrs) (rnrs io ports)))
  (write-template 'make-i/o-encoding-error '((obj obj)) '((rnrs) (rnrs io ports)))
  (write-template 'make-i/o-error '(()) '((rnrs) (rnrs io ports) (rnrs io simple) (rnrs files)))
  (write-template 'make-i/o-file-already-exists-error '((filename)) '((rnrs) (rnrs io ports) (rnrs io simple) (rnrs files)))
  (write-template 'make-i/o-file-does-not-exist-error '((filename)) '((rnrs) (rnrs io ports) (rnrs io simple) (rnrs files)))
  (write-template 'make-i/o-file-is-read-only-error '((filename)) '((rnrs) (rnrs io ports) (rnrs io simple) (rnrs files)))
  (write-template 'make-i/o-file-protection-error '((filename)) '((rnrs) (rnrs io ports) (rnrs io simple) (rnrs files)))
  (write-template 'make-i/o-filename-error '((filename)) '((rnrs) (rnrs io ports) (rnrs io simple) (rnrs files)))
  (write-template 'make-i/o-invalid-position-error '((position)) '((rnrs) (rnrs io ports) (rnrs io simple) (rnrs files)))
  (write-template 'make-i/o-port-error '((pobj)) '((rnrs) (rnrs io ports) (rnrs io simple) (rnrs files)))
  (write-template 'make-i/o-read-error '(()) '((rnrs) (rnrs io ports) (rnrs io simple) (rnrs files)))
  (write-template 'make-i/o-write-error '(()) '((rnrs) (rnrs io ports) (rnrs io simple) (rnrs files)))
  (write-template 'make-implementation-restriction-violation '(()) '((rnrs) (rnrs conditions)))
  (write-template 'make-irritants-condition '((obj)) '((rnrs) (rnrs conditions)))
  (write-template 'make-lexical-violation '(()) '((rnrs) (rnrs conditions)))
  (write-template 'make-list '((?)) '((scheme base)))
  (write-template 'make-message-condition '((obj)) '((rnrs) (rnrs conditions)))
  (write-template 'make-no-infinities-violation '(()) '((rnrs) (rnrs arithmetic flonums)))
  (write-template 'make-no-nans-violation '(()) '((rnrs) (rnrs arithmetic flonums)))
  (write-template 'make-non-continuable-violation '(()) '((rnrs) (rnrs conditions)))
  (write-template 'make-parameter '((?)) '((scheme base)))
  (write-template 'make-polar '((number number)) '((rnrs) (rnrs base) (scheme r5rs) (scheme complex)))
  (write-template 'make-promise '((?)) '((scheme lazy)))
  (write-template 'make-record-constructor-descriptor '((rtd boolean (or boolean procedure))) '((rnrs) (rnrs records procedural)))
  (write-template 'make-record-type-descriptor '((?)) '((rnrs) (rnrs records procedural)))
  (write-template 'make-rectangular '((number number)) '((rnrs) (rnrs base) (scheme r5rs) (scheme complex)))
  (write-template 'make-serious-condition '(()) '((rnrs) (rnrs conditions)))
  (write-template 'make-string '((number) (number char)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'make-syntax-violation '((obj obj)) '((rnrs) (rnrs conditions)))
  (write-template 'make-transcoder '((?)) '((rnrs) (rnrs io ports)))
  (write-template 'make-undefined-violation '(()) '((rnrs) (rnrs conditions)))
  (write-template 'make-variable-transformer '((proc)) '((rnrs) (rnrs syntax-case)))
  (write-template 'make-vector '((number) (number obj)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'make-violation '(()) '((rnrs) (rnrs conditions)))
  (write-template 'make-warning '(()) '((rnrs) (rnrs conditions)))
  (write-template 'make-who-condition '((obj)) '((rnrs) (rnrs conditions)))
  (write-template 'map '((procedure pair ...)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'max '((number ...)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'member '((obj list)) '((rnrs) (rnrs lists) (scheme r5rs) (scheme base)))
  (write-template 'memp '((proc list)) '((rnrs) (rnrs lists)))
  (write-template 'memq '((obj list)) '((rnrs) (rnrs lists) (scheme r5rs) (scheme base)))
  (write-template 'memv '((obj list)) '((rnrs) (rnrs lists) (scheme r5rs) (scheme base)))
  (write-template 'message-condition? '((obj)) '((rnrs) (rnrs conditions)))
  (write-template 'min '((number ...)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'mod '((number number)) '((rnrs) (rnrs base)))
  (write-template 'mod0 '((number number)) '((rnrs) (rnrs base)))
  (write-template 'modulo '((n n)) '((rnrs r5rs) (scheme r5rs) (scheme base)))
  (write-template 'nan? '((number)) '((rnrs) (rnrs base) (scheme inexact)))
  (write-template 'native-endianness '(()) '((rnrs) (rnrs bytevectors)))
  (write-template 'native-eol-style '(()) '((rnrs) (rnrs io ports)))
  (write-template 'native-transcoder '(()) '((rnrs) (rnrs io ports)))
  (write-template 'negative? '((number)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'newline '(() (textual-output-port)) '((rnrs) (rnrs io simple) (scheme r5rs) (scheme base)))
  (write-template 'no-infinities-violation? '((obj)) '((rnrs) (rnrs arithmetic flonums)))
  (write-template 'no-nans-violation? '((obj)) '((rnrs) (rnrs arithmetic flonums)))
  (write-template 'non-continuable-violation? '((obj)) '((rnrs) (rnrs conditions)))
  (write-template 'not '((obj)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'null-environment '((n)) '((rnrs r5rs) (scheme r5rs)))
  (write-template 'null? '((obj)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'number->string '((number) (number number) (number number number)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'number? '((obj)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'numerator '((number)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'odd? '((number)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'open-binary-input-file '((?)) '((scheme file)))
  (write-template 'open-binary-output-file '((?)) '((scheme file)))
  (write-template 'open-bytevector-input-port '((bytevector) (bytevector boolean)) '((rnrs) (rnrs io ports)))
  (write-template 'open-bytevector-output-port '(() (boolean)) '((rnrs) (rnrs io ports)))
  (write-template 'open-file-input-port '((string)) '((rnrs) (rnrs io ports)))
  (write-template 'open-file-input/output-port '((?)) '((rnrs) (rnrs io ports)))
  (write-template 'open-file-output-port '((?)) '((rnrs) (rnrs io ports)))
  (write-template 'open-input-bytevector '((?)) '((scheme base)))
  (write-template 'open-input-file '((filename)) '((rnrs) (rnrs io simple) (scheme r5rs) (scheme file)))
  (write-template 'open-input-string '((?)) '((scheme base)))
  (write-template 'open-output-bytevector '((?)) '((scheme base)))
  (write-template 'open-output-file '((filename)) '((rnrs) (rnrs io simple) (scheme r5rs) (scheme file)))
  (write-template 'open-output-string '((?)) '((scheme base)))
  (write-template 'open-string-input-port '((string)) '((rnrs) (rnrs io ports)))
  (write-template 'open-string-output-port '(()) '((rnrs) (rnrs io ports)))
  (write-template 'or '((test ...)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'output-port-buffer-mode '((output-port)) '((rnrs) (rnrs io ports)))
  (write-template 'output-port-open? '((?)) '((scheme base)))
  (write-template 'output-port? '((obj)) '((rnrs) (rnrs io simple) (rnrs io ports) (scheme r5rs) (scheme base)))
  (write-template 'pair? '((obj)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'parameterize '((?)) '((scheme base)))
  (write-template 'partition '((proc list)) '((rnrs) (rnrs lists)))
  (write-template 'peek-char '(() (textual-input-port)) '((rnrs) (rnrs io simple) (scheme r5rs) (scheme base)))
  (write-template 'peek-u8 '((?)) '((scheme base)))
  (write-template 'port-eof? '((?)) '((rnrs) (rnrs io ports)))
  (write-template 'port-has-port-position? '((port)) '((rnrs) (rnrs io ports)))
  (write-template 'port-has-set-port-position!? '((port)) '((rnrs) (rnrs io ports)))
  (write-template 'port-position '((?)) '((rnrs) (rnrs io ports)))
  (write-template 'port-transcoder '((port)) '((rnrs) (rnrs io ports)))
  (write-template 'port? '((obj)) '((rnrs) (rnrs io ports) (scheme base)))
  (write-template 'positive? '((number)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'procedure? '((obj)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'promise? '((?)) '((scheme lazy)))
  (write-template 'put-bytevector '((binary-port bytevector number number)) '((rnrs) (rnrs io ports)))
  (write-template 'put-char '((?)) '((rnrs) (rnrs io ports)))
  (write-template 'put-datum '((?)) '((rnrs) (rnrs io ports)))
  (write-template 'put-string '((textual-port string number number)) '((rnrs) (rnrs io ports)))
  (write-template 'put-u8 '((?)) '((rnrs) (rnrs io ports)))
  (write-template 'quasiquote '((?)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'quasisyntax '((?)) '((rnrs) (rnrs syntax-case)))
  (write-template 'quote '((datum)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'quotient '((n n)) '((rnrs r5rs) (scheme r5rs) (scheme base)))
  (write-template 'raise '((?)) '((rnrs) (rnrs exceptions) (scheme base)))
  (write-template 'raise-continuable '((?)) '((rnrs) (rnrs exceptions) (scheme base)))
  (write-template 'rational-valued? '((obj)) '((rnrs) (rnrs base)))
  (write-template 'rational? '((obj)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'rationalize '((number number)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'read '(() (textual-input-port)) '((rnrs) (rnrs io simple) (scheme read) (scheme r5rs)))
  (write-template 'read-bytevector '((?)) '((scheme base)))
  (write-template 'read-bytevector! '((?)) '((scheme base)))
  (write-template 'read-char '(() (textual-input-port)) '((rnrs) (rnrs io simple) (scheme r5rs) (scheme base)))
  (write-template 'read-error? '((?)) '((scheme base)))
  (write-template 'read-line '((?)) '((scheme base)))
  (write-template 'read-string '((?)) '((scheme base)))
  (write-template 'read-u8 '((?)) '((scheme base)))
  (write-template 'real->flonum '((number)) '((rnrs) (rnrs arithmetic flonums)))
  (write-template 'real-part '((number)) '((rnrs) (rnrs base) (scheme r5rs) (scheme complex)))
  (write-template 'real-valued? '((obj)) '((rnrs) (rnrs base)))
  (write-template 'real? '((obj)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'record-accessor '((rtd number)) '((rnrs) (rnrs records procedural)))
  (write-template 'record-constructor '((?)) '((rnrs) (rnrs records procedural)))
  (write-template 'record-constructor-descriptor '((?)) '((rnrs) (rnrs records syntactic)))
  (write-template 'record-field-mutable? '((rtd number)) '((rnrs) (rnrs records inspection)))
  (write-template 'record-mutator '((rtd number)) '((rnrs) (rnrs records procedural)))
  (write-template 'record-predicate '((rtd)) '((rnrs) (rnrs records procedural)))
  (write-template 'record-rtd '((record)) '((rnrs) (rnrs records inspection)))
  (write-template 'record-type-descriptor '((?)) '((rnrs) (rnrs records syntactic)))
  (write-template 'record-type-descriptor? '((obj)) '((rnrs) (rnrs records procedural)))
  (write-template 'record-type-field-names '((rtd)) '((rnrs) (rnrs records inspection)))
  (write-template 'record-type-generative? '((rtd)) '((rnrs) (rnrs records inspection)))
  (write-template 'record-type-name '((rtd)) '((rnrs) (rnrs records inspection)))
  (write-template 'record-type-opaque? '((rtd)) '((rnrs) (rnrs records inspection)))
  (write-template 'record-type-parent '((rtd)) '((rnrs) (rnrs records inspection)))
  (write-template 'record-type-sealed? '((rtd)) '((rnrs) (rnrs records inspection)))
  (write-template 'record-type-uid '((rtd)) '((rnrs) (rnrs records inspection)))
  (write-template 'record? '((obj)) '((rnrs) (rnrs records inspection)))
  (write-template 'remainder '((n n)) '((rnrs r5rs) (scheme r5rs) (scheme base)))
  (write-template 'remove '((obj list)) '((rnrs) (rnrs lists)))
  (write-template 'remp '((proc list)) '((rnrs) (rnrs lists)))
  (write-template 'remq '((obj list)) '((rnrs) (rnrs lists)))
  (write-template 'remv '((obj list)) '((rnrs) (rnrs lists)))
  (write-template 'reverse '((pair)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'round '((number)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'scheme-report-environment '((n)) '((rnrs r5rs) (scheme r5rs)))
  (write-template 'serious-condition? '((obj)) '((rnrs) (rnrs conditions)))
  (write-template 'set! '((variable expression)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'set-car! '((pair obj)) '((rnrs mutable-pairs) (scheme r5rs) (scheme base)))
  (write-template 'set-cdr! '((pair obj)) '((rnrs mutable-pairs) (scheme r5rs) (scheme base)))
  (write-template 'set-port-position! '((?)) '((rnrs) (rnrs io ports)))
  (write-template 'simple-conditions '((condition)) '((rnrs) (rnrs conditions)))
  (write-template 'sin '((number)) '((rnrs) (rnrs base) (scheme r5rs) (scheme inexact)))
  (write-template 'sint-list->bytevector '((list endianness number)) '((rnrs) (rnrs bytevectors)))
  (write-template 'sqrt '((number)) '((rnrs) (rnrs base) (scheme r5rs) (scheme inexact)))
  (write-template 'square '((?)) '((scheme base)))
  (write-template 'standard-error-port '(()) '((rnrs) (rnrs io ports)))
  (write-template 'standard-input-port '(()) '((rnrs) (rnrs io ports)))
  (write-template 'standard-output-port '(()) '((rnrs) (rnrs io ports)))
  (write-template 'string '((char ...)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'string->bytevector '((?)) '((rnrs) (rnrs io ports)))
  (write-template 'string->list '((string)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'string->number '((string) (string number)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'string->symbol '((string)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'string->utf16 '((string) (string endianness)) '((rnrs) (rnrs bytevectors)))
  (write-template 'string->utf32 '((string) (string endianness)) '((rnrs) (rnrs bytevectors)))
  (write-template 'string->utf8 '((string)) '((rnrs) (rnrs bytevectors) (scheme base)))
  (write-template 'string->vector '((?)) '((scheme base)))
  (write-template 'string-append '((string ...)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'string-ci-hash '((string)) '((rnrs) (rnrs hashtables)))
  (write-template 'string-ci<=? '((string string string ...)) '((rnrs) (rnrs unicode) (scheme r5rs) (scheme char)))
  (write-template 'string-ci<? '((string string string ...)) '((rnrs) (rnrs unicode) (scheme r5rs) (scheme char)))
  (write-template 'string-ci=? '((string string string ...)) '((rnrs) (rnrs unicode) (scheme r5rs) (scheme char)))
  (write-template 'string-ci>=? '((string string string ...)) '((rnrs) (rnrs unicode) (scheme r5rs) (scheme char)))
  (write-template 'string-ci>? '((string string string ...)) '((rnrs) (rnrs unicode) (scheme r5rs) (scheme char)))
  (write-template 'string-copy '((string)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'string-copy! '((?)) '((scheme base)))
  (write-template 'string-downcase '((string)) '((rnrs) (rnrs unicode) (scheme char)))
  (write-template 'string-fill! '((string char)) '((rnrs mutable-strings) (scheme r5rs) (scheme base)))
  (write-template 'string-foldcase '((string)) '((rnrs) (rnrs unicode) (scheme char)))
  (write-template 'string-for-each '((procedure string ...)) '((rnrs) (rnrs base) (scheme base)))
  (write-template 'string-hash '((string)) '((rnrs) (rnrs hashtables)))
  (write-template 'string-length '((string)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'string-map '((?)) '((scheme base)))
  (write-template 'string-normalize-nfc '((string)) '((rnrs) (rnrs unicode)))
  (write-template 'string-normalize-nfd '((string)) '((rnrs) (rnrs unicode)))
  (write-template 'string-normalize-nfkc '((string)) '((rnrs) (rnrs unicode)))
  (write-template 'string-normalize-nfkd '((string)) '((rnrs) (rnrs unicode)))
  (write-template 'string-ref '((string number)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'string-set! '((string k char)) '((rnrs mutable-strings) (scheme r5rs) (scheme base)))
  (write-template 'string-titlecase '((string)) '((rnrs) (rnrs unicode)))
  (write-template 'string-upcase '((string)) '((rnrs) (rnrs unicode) (scheme char)))
  (write-template 'string<=? '((string string string ...)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'string<? '((string string string ...)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'string=? '((string string string ...)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'string>=? '((string string string ...)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'string>? '((string string string ...)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'string? '((obj)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'substring '((string number number)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'symbol->string '((symbol)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'symbol-hash '((symbol)) '((rnrs) (rnrs hashtables)))
  (write-template 'symbol=? '((symbol symbol symbol ...)) '((rnrs) (rnrs base) (scheme base)))
  (write-template 'symbol? '((obj)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'syntax '((?)) '((rnrs) (rnrs syntax-case)))
  (write-template 'syntax->datum '((obj)) '((rnrs) (rnrs syntax-case)))
  (write-template 'syntax-case '((?)) '((rnrs) (rnrs syntax-case)))
  (write-template 'syntax-error '((?)) '((scheme base)))
  (write-template 'syntax-rules '((?)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'syntax-violation '((?)) '((rnrs) (rnrs syntax-case)))
  (write-template 'syntax-violation-form '((?)) '((rnrs) (rnrs conditions)))
  (write-template 'syntax-violation-subform '((?)) '((rnrs) (rnrs conditions)))
  (write-template 'syntax-violation? '((obj)) '((rnrs) (rnrs conditions)))
  (write-template 'tan '((number)) '((rnrs) (rnrs base) (scheme r5rs) (scheme inexact)))
  (write-template 'textual-port? '((port)) '((rnrs) (rnrs io ports) (scheme base)))
  (write-template 'transcoded-port '((?)) '((rnrs) (rnrs io ports)))
  (write-template 'transcoder-codec '((?)) '((rnrs) (rnrs io ports)))
  (write-template 'transcoder-eol-style '((?)) '((rnrs) (rnrs io ports)))
  (write-template 'transcoder-error-handling-mode '((?)) '((rnrs) (rnrs io ports)))
  (write-template 'truncate '((number)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'truncate-quotient '((?)) '((scheme base)))
  (write-template 'truncate-remainder '((?)) '((scheme base)))
  (write-template 'truncate/ '((?)) '((scheme base)))
  (write-template 'u8-list->bytevector '((list)) '((rnrs) (rnrs bytevectors)))
  (write-template 'u8-ready? '((?)) '((scheme base)))
  (write-template 'uint-list->bytevector '((list endianness number)) '((rnrs) (rnrs bytevectors)))
  (write-template 'undefined-violation? '((obj)) '((rnrs) (rnrs conditions)))
  (write-template 'unless '((test expression expression ...)) '((rnrs) (rnrs control) (scheme base)))
  (write-template 'unquote '((?)) '((rnrs) (rnrs base) (scheme base)))
  (write-template 'unquote-splicing '((?)) '((rnrs) (rnrs base) (scheme base)))
  (write-template 'unsyntax '((?)) '((rnrs) (rnrs syntax-case)))
  (write-template 'unsyntax-splicing '((?)) '((rnrs) (rnrs syntax-case)))
  (write-template 'utf-16-codec '(()) '((rnrs) (rnrs io ports)))
  (write-template 'utf-8-codec '(()) '((rnrs) (rnrs io ports)))
  (write-template 'utf16->string '((bytevector endianness) (bytevector endianness obj)) '((rnrs) (rnrs bytevectors)))
  (write-template 'utf32->string '((bytevector endianness) (bytevector endianness obj)) '((rnrs) (rnrs bytevectors)))
  (write-template 'utf8->string '((bytevector)) '((rnrs) (rnrs bytevectors) (scheme base)))
  (write-template 'values '((obj ...)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'vector '((obj ...)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'vector->list '((vector)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'vector->string '((?)) '((scheme base)))
  (write-template 'vector-append '((?)) '((scheme base)))
  (write-template 'vector-copy '((?)) '((scheme base)))
  (write-template 'vector-copy! '((?)) '((scheme base)))
  (write-template 'vector-fill! '((vector obj)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'vector-for-each '((procedure vector ...)) '((rnrs) (rnrs base) (scheme base)))
  (write-template 'vector-length '((vector)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'vector-map '((procedure vector ...)) '((rnrs) (rnrs base) (scheme base)))
  (write-template 'vector-ref '((vector number)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'vector-set! '((vector number obj)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'vector-sort '((proc vector)) '((rnrs) (rnrs sorting)))
  (write-template 'vector-sort! '((proc vector)) '((rnrs) (rnrs sorting)))
  (write-template 'vector? '((obj)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  (write-template 'violation? '((obj)) '((rnrs) (rnrs conditions)))
  (write-template 'warning? '((obj)) '((rnrs) (rnrs conditions)))
  (write-template 'when '((test expression expression ...)) '((rnrs) (rnrs control) (scheme base)))
  (write-template 'who-condition? '((obj)) '((rnrs) (rnrs conditions)))
  (write-template 'with-exception-handler '((handler thunk)) '((rnrs) (rnrs exceptions) (scheme base)))
  (write-template 'with-input-from-file '((filename thunk)) '((rnrs) (rnrs io simple) (scheme r5rs) (scheme file)))
  (write-template 'with-output-to-file '((filename thunk)) '((rnrs) (rnrs io simple) (scheme r5rs) (scheme file)))
  (write-template 'with-syntax '((?)) '((rnrs) (rnrs syntax-case)))
  (write-template 'write '((obj) (obj textual-output-port)) '((rnrs) (rnrs io simple) (scheme write) (scheme r5rs)))
  (write-template 'write-bytevector '((?)) '((scheme base)))
  (write-template 'write-char '((char) (char textual-output-port)) '((rnrs) (rnrs io simple) (scheme r5rs) (scheme base)))
  (write-template 'write-shared '((?)) '((scheme write)))
  (write-template 'write-simple '((?)) '((scheme write)))
  (write-template 'write-string '((?)) '((scheme base)))
  (write-template 'write-u8 '((?)) '((scheme base)))
  (write-template 'zero? '((number)) '((rnrs) (rnrs base) (scheme r5rs) (scheme base)))
  )
